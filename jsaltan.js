/* Generated by the Nim Compiler v1.0.6 */
/*   (c) 2019 Andreas Rumpf */

var framePtr = null;
var excHandler = 0;
var lastJSError = null;
if (typeof Int8Array === 'undefined') Int8Array = Array;
if (typeof Int16Array === 'undefined') Int16Array = Array;
if (typeof Int32Array === 'undefined') Int32Array = Array;
if (typeof Uint8Array === 'undefined') Uint8Array = Array;
if (typeof Uint16Array === 'undefined') Uint16Array = Array;
if (typeof Uint32Array === 'undefined') Uint32Array = Array;
if (typeof Float32Array === 'undefined') Float32Array = Array;
if (typeof Float64Array === 'undefined') Float64Array = Array;
var NTI3630 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3652 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3654 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3644 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3660 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI161522 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI3650 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3642 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3646 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3658 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3608 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3714 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI114 = {size: 0,kind: 40,base: null,node: null,finalizer: null};
var NTI138 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NTI140 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI3708 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI3626 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3628 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3662 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NNI3662 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3662.node = NNI3662;
var NNI3628 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3628.node = NNI3628;
NTI3708.base = NTI3626;
NTI3714.base = NTI3626;
var NNI3626 = {kind: 2, len: 6, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI3708, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI140, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI138, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI138, name: "trace", sons: null}, 
{kind: 1, offset: "raiseId", len: 0, typ: NTI114, name: "raiseId", sons: null}, 
{kind: 1, offset: "up", len: 0, typ: NTI3714, name: "up", sons: null}]};
NTI3626.node = NNI3626;
var NNI3608 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3608.node = NNI3608;
NTI3626.base = NTI3608;
NTI3628.base = NTI3626;
NTI3662.base = NTI3628;
var NNI3658 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3658.node = NNI3658;
NTI3658.base = NTI3628;
var NNI3646 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3646.node = NNI3646;
var NNI3642 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3642.node = NNI3642;
NTI3642.base = NTI3628;
NTI3646.base = NTI3642;
var NNI3650 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3650.node = NNI3650;
NTI3650.base = NTI3628;
NTI161522.base = NTI138;
var NNI3660 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3660.node = NNI3660;
NTI3660.base = NTI3628;
var NNI3644 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3644.node = NNI3644;
NTI3644.base = NTI3642;
var NNI3654 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3654.node = NNI3654;
var NNI3652 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3652.node = NNI3652;
var NNI3630 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3630.node = NNI3630;
NTI3630.base = NTI3626;
NTI3652.base = NTI3630;
NTI3654.base = NTI3652;

function mnewString(len_23463) {
		    return new Array(len_23463);
  

	
}

function makeNimstrLit(c_23270) {
		  var ln = c_23270.length;
  var result = new Array(ln);
  for (var i = 0; i < ln; ++i) {
    result[i] = c_23270.charCodeAt(i);
  }
  return result;
  

	
}

function setConstr() {
		    var result = {};
    for (var i = 0; i < arguments.length; ++i) {
      var x = arguments[i];
      if (typeof(x) == "object") {
        for (var j = x[0]; j <= x[1]; ++j) {
          result[j] = true;
        }
      } else {
        result[x] = true;
      }
    }
    return result;
  

	
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);

function nimCopy(dest_24827, src_24828, ti_24829) {
	var result_25019 = null;

		switch (ti_24829.kind) {
		case 21:
		case 22:
		case 23:
		case 5:
			if (!(is_fat_pointer_24801(ti_24829))) {
			result_25019 = src_24828;
			}
			else {
				result_25019 = [src_24828[0], src_24828[1]];
			}
			
			break;
		case 19:
			      if (dest_24827 === null || dest_24827 === undefined) {
        dest_24827 = {};
      }
      else {
        for (var key in dest_24827) { delete dest_24827[key]; }
      }
      for (var key in src_24828) { dest_24827[key] = src_24828[key]; }
      result_25019 = dest_24827;
    
			break;
		case 18:
		case 17:
			if (!((ti_24829.base == null))) {
			result_25019 = nimCopy(dest_24827, src_24828, ti_24829.base);
			}
			else {
			if ((ti_24829.kind == 17)) {
			result_25019 = (dest_24827 === null || dest_24827 === undefined) ? {m_type: ti_24829} : dest_24827;
			}
			else {
				result_25019 = (dest_24827 === null || dest_24827 === undefined) ? {} : dest_24827;
			}
			}
			nimCopyAux(result_25019, src_24828, ti_24829.node);
			break;
		case 24:
		case 4:
		case 27:
		case 16:
			      if (src_24828 === null) {
        result_25019 = null;
      }
      else {
        if (dest_24827 === null || dest_24827 === undefined) {
          dest_24827 = new Array(src_24828.length);
        }
        else {
          dest_24827.length = src_24828.length;
        }
        result_25019 = dest_24827;
        for (var i = 0; i < src_24828.length; ++i) {
          result_25019[i] = nimCopy(result_25019[i], src_24828[i], ti_24829.base);
        }
      }
    
			break;
		case 28:
			      if (src_24828 !== null) {
        result_25019 = src_24828.slice(0);
      }
    
			break;
		default: 
			result_25019 = src_24828;
			break;
		}

	return result_25019;

}

function toJSStr(s_23304) {
										var Tmp5;
						var Tmp7;

	var result_23305 = null;

		var res_23363 = new_seq_23336((s_23304 != null ? s_23304.length : 0));
		var i_23365 = 0;
		var j_23367 = 0;
		L1: do {
				L2: while (true) {
				if (!(i_23365 < (s_23304 != null ? s_23304.length : 0))) break L2;
					var c_23368 = s_23304[i_23365];
					if ((c_23368 < 128)) {
					res_23363[j_23367] = String.fromCharCode(c_23368);
					i_23365 += 1;
					}
					else {
						var helper_23391 = new_seq_23336(0);
						L3: do {
								L4: while (true) {
								if (!true) break L4;
									var code_23392 = c_23368.toString(16);
									if (((code_23392 != null ? code_23392.length : 0) == 1)) {
									if (helper_23391 != null) { helper_23391.push("%0"); } else { helper_23391 = ["%0"]; };
									}
									else {
									if (helper_23391 != null) { helper_23391.push("%"); } else { helper_23391 = ["%"]; };
									}
									
									if (helper_23391 != null) { helper_23391.push(code_23392); } else { helper_23391 = [code_23392]; };
									i_23365 += 1;
										if (((s_23304 != null ? s_23304.length : 0) <= i_23365)) Tmp5 = true; else {											Tmp5 = (s_23304[i_23365] < 128);										}									if (Tmp5) {
									break L3;
									}
									
									c_23368 = s_23304[i_23365];
								}
						} while(false);
++excHandler;
						Tmp7 = framePtr;
						try {
						res_23363[j_23367] = decodeURIComponent(helper_23391.join(""));
--excHandler;
} catch (EXC) {
 var prevJSError = lastJSError;
 lastJSError = EXC;
 --excHandler;
						framePtr = Tmp7;
						res_23363[j_23367] = helper_23391.join("");
						lastJSError = prevJSError;
						} finally {
						framePtr = Tmp7;
						}
					}
					
					j_23367 += 1;
				}
		} while(false);
		if (res_23363 === null) res_23363 = [];
               if (res_23363.length < j_23367) { for (var i=res_23363.length;i<j_23367;++i) res_23363.push(null); }
               else { res_23363.length = j_23367; };
		result_23305 = res_23363.join("");

	return result_23305;

}

function raiseException(e_21618, ename_21619) {
		e_21618.name = ename_21619;
		if ((excHandler == 0)) {
		unhandledException(e_21618);
		}
		
		throw e_21618;

	
}

function chckRange(i_25124, a_25125, b_25126) {
			var Tmp1;

	var result_25127 = 0;

	BeforeRet: do {
			if (!(a_25125 <= i_25124)) Tmp1 = false; else {				Tmp1 = (i_25124 <= b_25126);			}		if (Tmp1) {
		result_25127 = i_25124;
		break BeforeRet;
		}
		else {
		raiseRangeError();
		}
		
	} while (false);

	return result_25127;

}

function cstrToNimstr(c_23287) {
		  var ln = c_23287.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_23287.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_23287.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  return result;
  

	
}

function chckIndx(i_25105, a_25106, b_25107) {
			var Tmp1;

	var result_25108 = 0;

	BeforeRet: do {
			if (!(a_25106 <= i_25105)) Tmp1 = false; else {				Tmp1 = (i_25105 <= b_25107);			}		if (Tmp1) {
		result_25108 = i_25105;
		break BeforeRet;
		}
		else {
		raiseIndexError(i_25105, a_25106, b_25107);
		}
		
	} while (false);

	return result_25108;

}

function addChar(x_25311, c_25312) {
		x_25311.push(c_25312);

	
}

function addInt(a_23803, b_23804) {
		    var result = a_23803 + b_23804;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

	
}

function mulInt(a_23839, b_23840) {
		    var result = a_23839 * b_23840;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

	
}

function subInt(a_23821, b_23822) {
		    var result = a_23821 - b_23822;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

	
}

function nimMax(a_24221, b_24222) {
		var Tmp1;

	var result_24223 = 0;

	BeforeRet: do {
		if ((b_24222 <= a_24221)) {
		Tmp1 = a_24221;
		}
		else {
		Tmp1 = b_24222;
		}
		
		result_24223 = Tmp1;
		break BeforeRet;
	} while (false);

	return result_24223;

}

function nimMin(a_24203, b_24204) {
		var Tmp1;

	var result_24205 = 0;

	BeforeRet: do {
		if ((a_24203 <= b_24204)) {
		Tmp1 = a_24203;
		}
		else {
		Tmp1 = b_24204;
		}
		
		result_24205 = Tmp1;
		break BeforeRet;
	} while (false);

	return result_24205;

}
var ConstSet2 = setConstr([65, 90]);
var ConstSet3 = setConstr(4);

function raiseFieldError(f_23055) {
		var eHEX60gensym23058_23203 = null;
		eHEX60gensym23058_23203 = {m_type: NTI3660, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		eHEX60gensym23058_23203.message = nimCopy(null, f_23055, NTI138);
		eHEX60gensym23058_23203.parent = null;
		raiseException(eHEX60gensym23058_23203, "FieldError");

	
}

function divInt(a_23857, b_23858) {
		    if (b_23858 == 0) raiseDivByZero();
    if (b_23858 == -1 && a_23857 == 2147483647) raiseOverflow();
    return Math.trunc(a_23857 / b_23858);
  

	
}

function modInt(a_23875, b_23876) {
		    if (b_23876 == 0) raiseDivByZero();
    if (b_23876 == -1 && a_23875 == 2147483647) raiseOverflow();
    return Math.trunc(a_23875 % b_23876);
  

	
}

function eqStrings(a_23641, b_23642) {
		    if (a_23641 == b_23642) return true;
    if (a_23641 === null && b_23642.length == 0) return true;
    if (b_23642 === null && a_23641.length == 0) return true;
    if ((!a_23641) || (!b_23642)) return false;
    var alen = a_23641.length;
    if (alen != b_23642.length) return false;
    for (var i = 0; i < alen; ++i)
      if (a_23641[i] != b_23642[i]) return false;
    return true;
  

	
}
var ConstSet4 = setConstr(5);
var ConstSet5 = setConstr([48, 57]);
var ConstSet6 = setConstr(6);
var ConstSet7 = setConstr(5);
				var to_lower_ranges_86892 = [65, 90, 532, 192, 214, 532, 216, 222, 532, 393, 394, 705, 433, 434, 717, 904, 906, 537, 910, 911, 563, 913, 929, 532, 931, 939, 532, 1021, 1023, 370, 1024, 1039, 580, 1040, 1071, 532, 1329, 1366, 548, 4256, 4293, 7764, 5024, 5103, 39364, 5104, 5109, 508, 7312, 7354, -2508, 7357, 7359, -2508, 7944, 7951, 492, 7960, 7965, 492, 7976, 7983, 492, 7992, 7999, 492, 8008, 8013, 492, 8040, 8047, 492, 8072, 8079, 492, 8088, 8095, 492, 8104, 8111, 492, 8120, 8121, 492, 8122, 8123, 426, 8136, 8139, 414, 8152, 8153, 492, 8154, 8155, 400, 8168, 8169, 492, 8170, 8171, 388, 8184, 8185, 372, 8186, 8187, 374, 11264, 11310, 548, 11390, 11391, -10315, 65313, 65338, 532, 66560, 66599, 540, 66736, 66771, 540, 68736, 68786, 564, 71840, 71871, 532, 93760, 93791, 532, 125184, 125217, 534];
				var to_lower_singlets_88162 = [256, 501, 258, 501, 260, 501, 262, 501, 264, 501, 266, 501, 268, 501, 270, 501, 272, 501, 274, 501, 276, 501, 278, 501, 280, 501, 282, 501, 284, 501, 286, 501, 288, 501, 290, 501, 292, 501, 294, 501, 296, 501, 298, 501, 300, 501, 302, 501, 304, 301, 306, 501, 308, 501, 310, 501, 313, 501, 315, 501, 317, 501, 319, 501, 321, 501, 323, 501, 325, 501, 327, 501, 330, 501, 332, 501, 334, 501, 336, 501, 338, 501, 340, 501, 342, 501, 344, 501, 346, 501, 348, 501, 350, 501, 352, 501, 354, 501, 356, 501, 358, 501, 360, 501, 362, 501, 364, 501, 366, 501, 368, 501, 370, 501, 372, 501, 374, 501, 376, 379, 377, 501, 379, 501, 381, 501, 385, 710, 386, 501, 388, 501, 390, 706, 391, 501, 395, 501, 398, 579, 399, 702, 400, 703, 401, 501, 403, 705, 404, 707, 406, 711, 407, 709, 408, 501, 412, 711, 413, 713, 415, 714, 416, 501, 418, 501, 420, 501, 422, 718, 423, 501, 425, 718, 428, 501, 430, 718, 431, 501, 435, 501, 437, 501, 439, 719, 440, 501, 444, 501, 452, 502, 453, 501, 455, 502, 456, 501, 458, 502, 459, 501, 461, 501, 463, 501, 465, 501, 467, 501, 469, 501, 471, 501, 473, 501, 475, 501, 478, 501, 480, 501, 482, 501, 484, 501, 486, 501, 488, 501, 490, 501, 492, 501, 494, 501, 497, 502, 498, 501, 500, 501, 502, 403, 503, 444, 504, 501, 506, 501, 508, 501, 510, 501, 512, 501, 514, 501, 516, 501, 518, 501, 520, 501, 522, 501, 524, 501, 526, 501, 528, 501, 530, 501, 532, 501, 534, 501, 536, 501, 538, 501, 540, 501, 542, 501, 544, 370, 546, 501, 548, 501, 550, 501, 552, 501, 554, 501, 556, 501, 558, 501, 560, 501, 562, 501, 570, 11295, 571, 501, 573, 337, 574, 11292, 577, 501, 579, 305, 580, 569, 581, 571, 582, 501, 584, 501, 586, 501, 588, 501, 590, 501, 880, 501, 882, 501, 886, 501, 895, 616, 902, 538, 908, 564, 975, 508, 984, 501, 986, 501, 988, 501, 990, 501, 992, 501, 994, 501, 996, 501, 998, 501, 1000, 501, 1002, 501, 1004, 501, 1006, 501, 1012, 440, 1015, 501, 1017, 493, 1018, 501, 1120, 501, 1122, 501, 1124, 501, 1126, 501, 1128, 501, 1130, 501, 1132, 501, 1134, 501, 1136, 501, 1138, 501, 1140, 501, 1142, 501, 1144, 501, 1146, 501, 1148, 501, 1150, 501, 1152, 501, 1162, 501, 1164, 501, 1166, 501, 1168, 501, 1170, 501, 1172, 501, 1174, 501, 1176, 501, 1178, 501, 1180, 501, 1182, 501, 1184, 501, 1186, 501, 1188, 501, 1190, 501, 1192, 501, 1194, 501, 1196, 501, 1198, 501, 1200, 501, 1202, 501, 1204, 501, 1206, 501, 1208, 501, 1210, 501, 1212, 501, 1214, 501, 1216, 515, 1217, 501, 1219, 501, 1221, 501, 1223, 501, 1225, 501, 1227, 501, 1229, 501, 1232, 501, 1234, 501, 1236, 501, 1238, 501, 1240, 501, 1242, 501, 1244, 501, 1246, 501, 1248, 501, 1250, 501, 1252, 501, 1254, 501, 1256, 501, 1258, 501, 1260, 501, 1262, 501, 1264, 501, 1266, 501, 1268, 501, 1270, 501, 1272, 501, 1274, 501, 1276, 501, 1278, 501, 1280, 501, 1282, 501, 1284, 501, 1286, 501, 1288, 501, 1290, 501, 1292, 501, 1294, 501, 1296, 501, 1298, 501, 1300, 501, 1302, 501, 1304, 501, 1306, 501, 1308, 501, 1310, 501, 1312, 501, 1314, 501, 1316, 501, 1318, 501, 1320, 501, 1322, 501, 1324, 501, 1326, 501, 4295, 7764, 4301, 7764, 7680, 501, 7682, 501, 7684, 501, 7686, 501, 7688, 501, 7690, 501, 7692, 501, 7694, 501, 7696, 501, 7698, 501, 7700, 501, 7702, 501, 7704, 501, 7706, 501, 7708, 501, 7710, 501, 7712, 501, 7714, 501, 7716, 501, 7718, 501, 7720, 501, 7722, 501, 7724, 501, 7726, 501, 7728, 501, 7730, 501, 7732, 501, 7734, 501, 7736, 501, 7738, 501, 7740, 501, 7742, 501, 7744, 501, 7746, 501, 7748, 501, 7750, 501, 7752, 501, 7754, 501, 7756, 501, 7758, 501, 7760, 501, 7762, 501, 7764, 501, 7766, 501, 7768, 501, 7770, 501, 7772, 501, 7774, 501, 7776, 501, 7778, 501, 7780, 501, 7782, 501, 7784, 501, 7786, 501, 7788, 501, 7790, 501, 7792, 501, 7794, 501, 7796, 501, 7798, 501, 7800, 501, 7802, 501, 7804, 501, 7806, 501, 7808, 501, 7810, 501, 7812, 501, 7814, 501, 7816, 501, 7818, 501, 7820, 501, 7822, 501, 7824, 501, 7826, 501, 7828, 501, 7838, -7115, 7840, 501, 7842, 501, 7844, 501, 7846, 501, 7848, 501, 7850, 501, 7852, 501, 7854, 501, 7856, 501, 7858, 501, 7860, 501, 7862, 501, 7864, 501, 7866, 501, 7868, 501, 7870, 501, 7872, 501, 7874, 501, 7876, 501, 7878, 501, 7880, 501, 7882, 501, 7884, 501, 7886, 501, 7888, 501, 7890, 501, 7892, 501, 7894, 501, 7896, 501, 7898, 501, 7900, 501, 7902, 501, 7904, 501, 7906, 501, 7908, 501, 7910, 501, 7912, 501, 7914, 501, 7916, 501, 7918, 501, 7920, 501, 7922, 501, 7924, 501, 7926, 501, 7928, 501, 7930, 501, 7932, 501, 7934, 501, 8025, 492, 8027, 492, 8029, 492, 8031, 492, 8124, 491, 8140, 491, 8172, 493, 8188, 491, 8486, -7017, 8490, -7883, 8491, -7762, 8498, 528, 8579, 501, 11360, 501, 11362, -10243, 11363, -3314, 11364, -10227, 11367, 501, 11369, 501, 11371, 501, 11373, -10280, 11374, -10249, 11375, -10283, 11376, -10282, 11378, 501, 11381, 501, 11392, 501, 11394, 501, 11396, 501, 11398, 501, 11400, 501, 11402, 501, 11404, 501, 11406, 501, 11408, 501, 11410, 501, 11412, 501, 11414, 501, 11416, 501, 11418, 501, 11420, 501, 11422, 501, 11424, 501, 11426, 501, 11428, 501, 11430, 501, 11432, 501, 11434, 501, 11436, 501, 11438, 501, 11440, 501, 11442, 501, 11444, 501, 11446, 501, 11448, 501, 11450, 501, 11452, 501, 11454, 501, 11456, 501, 11458, 501, 11460, 501, 11462, 501, 11464, 501, 11466, 501, 11468, 501, 11470, 501, 11472, 501, 11474, 501, 11476, 501, 11478, 501, 11480, 501, 11482, 501, 11484, 501, 11486, 501, 11488, 501, 11490, 501, 11499, 501, 11501, 501, 11506, 501, 42560, 501, 42562, 501, 42564, 501, 42566, 501, 42568, 501, 42570, 501, 42572, 501, 42574, 501, 42576, 501, 42578, 501, 42580, 501, 42582, 501, 42584, 501, 42586, 501, 42588, 501, 42590, 501, 42592, 501, 42594, 501, 42596, 501, 42598, 501, 42600, 501, 42602, 501, 42604, 501, 42624, 501, 42626, 501, 42628, 501, 42630, 501, 42632, 501, 42634, 501, 42636, 501, 42638, 501, 42640, 501, 42642, 501, 42644, 501, 42646, 501, 42648, 501, 42650, 501, 42786, 501, 42788, 501, 42790, 501, 42792, 501, 42794, 501, 42796, 501, 42798, 501, 42802, 501, 42804, 501, 42806, 501, 42808, 501, 42810, 501, 42812, 501, 42814, 501, 42816, 501, 42818, 501, 42820, 501, 42822, 501, 42824, 501, 42826, 501, 42828, 501, 42830, 501, 42832, 501, 42834, 501, 42836, 501, 42838, 501, 42840, 501, 42842, 501, 42844, 501, 42846, 501, 42848, 501, 42850, 501, 42852, 501, 42854, 501, 42856, 501, 42858, 501, 42860, 501, 42862, 501, 42873, 501, 42875, 501, 42877, -34832, 42878, 501, 42880, 501, 42882, 501, 42884, 501, 42886, 501, 42891, 501, 42893, -41780, 42896, 501, 42898, 501, 42902, 501, 42904, 501, 42906, 501, 42908, 501, 42910, 501, 42912, 501, 42914, 501, 42916, 501, 42918, 501, 42920, 501, 42922, -41808, 42923, -41819, 42924, -41815, 42925, -41805, 42926, -41808, 42928, -41758, 42929, -41782, 42930, -41761, 42931, 1428, 42932, 501, 42934, 501, 42936, 501, 42938, 501, 42940, 501, 42942, 501, 42946, 501, 42948, 452, 42949, -41807, 42950, -34884];
var ConstSet8 = setConstr(32, 9, 11, 13, 10, 12);
var ConstSet9 = setConstr(32, 9, 11, 13, 10, 12);
var ConstSet10 = setConstr(6);
var ConstSet11 = setConstr(6);
var ConstSet12 = setConstr(2);
var ConstSet13 = setConstr([97, 122]);
var ConstSet14 = setConstr(5);
var nim_program_result = 0;
var global_raise_hook_18618 = [null];
var local_raise_hook_18623 = [null];
var out_of_mem_hook_18626 = [null];
  if (!Math.trunc) {
    Math.trunc = function(v) {
      v = +v;
      if (!isFinite(v)) return v;

      return (v - v % 1)   ||   (v < 0 ? -0 : v === 0 ? v : 0);
    };
  }
var object_id_47237 = [0];

function is_fat_pointer_24801(ti_24803) {
	var result_24804 = false;

	BeforeRet: do {
		result_24804 = !((ConstSet1[ti_24803.base.kind] != undefined));
		break BeforeRet;
	} while (false);

	return result_24804;

}

function nimCopyAux(dest_24832, src_24833, n_24835) {
		switch (n_24835.kind) {
		case 0:
			break;
		case 1:
			      dest_24832[n_24835.offset] = nimCopy(dest_24832[n_24835.offset], src_24833[n_24835.offset], n_24835.typ);
    
			break;
		case 2:
			    for (var i = 0; i < n_24835.sons.length; i++) {
      nimCopyAux(dest_24832, src_24833, n_24835.sons[i]);
    }
    
			break;
		case 3:
			      dest_24832[n_24835.offset] = nimCopy(dest_24832[n_24835.offset], src_24833[n_24835.offset], n_24835.typ);
      for (var i = 0; i < n_24835.sons.length; ++i) {
        nimCopyAux(dest_24832, src_24833, n_24835.sons[i][1]);
      }
    
			break;
		}

	
}

function add_18638(x_18641, x_18641_Idx, y_18642) {
		      if (x_18641[x_18641_Idx] === null) { x_18641[x_18641_Idx] = []; }
      var off = x_18641[x_18641_Idx].length;
      x_18641[x_18641_Idx].length += y_18642.length;
      for (var i = 0; i < y_18642.length; ++i) {
        x_18641[x_18641_Idx][off+i] = y_18642.charCodeAt(i);
      }
    

	
}

function new_seq_23336(len_23339) {
	var result_23341 = null;

		result_23341 = new Array(len_23339); for (var i=0;i<len_23339;++i) {result_23341[i]=null;}
	return result_23341;

}

function unhandledException(e_21529) {
		var buf_21530 = [[]];
		if (!(((e_21529.message != null ? e_21529.message.length : 0) == 0))) {
		if (buf_21530[0] != null) { buf_21530[0] = (buf_21530[0]).concat(makeNimstrLit("Error: unhandled exception: ")); } else { buf_21530[0] = makeNimstrLit("Error: unhandled exception: "); };
		if (buf_21530[0] != null) { buf_21530[0] = (buf_21530[0]).concat(e_21529.message); } else { buf_21530[0] = e_21529.message.slice(); };
		}
		else {
		if (buf_21530[0] != null) { buf_21530[0] = (buf_21530[0]).concat(makeNimstrLit("Error: unhandled exception")); } else { buf_21530[0] = makeNimstrLit("Error: unhandled exception"); };
		}
		
		if (buf_21530[0] != null) { buf_21530[0] = (buf_21530[0]).concat(makeNimstrLit(" [")); } else { buf_21530[0] = makeNimstrLit(" ["); };
		add_18638(buf_21530, 0, e_21529.name);
		if (buf_21530[0] != null) { buf_21530[0] = (buf_21530[0]).concat(makeNimstrLit("]\x0A")); } else { buf_21530[0] = makeNimstrLit("]\x0A"); };
		var cbuf_21601 = toJSStr(buf_21530[0]);
		framePtr = null;
		  if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_21601);
  }
  else {
    throw cbuf_21601;
  }
  

	
}

function raiseRangeError() {
		var eHEX60gensym22457_22603 = null;
		eHEX60gensym22457_22603 = {m_type: NTI3662, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		eHEX60gensym22457_22603.message = nimCopy(null, makeNimstrLit("value out of range"), NTI138);
		eHEX60gensym22457_22603.parent = null;
		raiseException(eHEX60gensym22457_22603, "RangeError");

	
}

function raiseIndexError(i_22655, a_22656, b_22657) {
		var Tmp1;

		var eHEX60gensym22802_23003 = null;
		eHEX60gensym22802_23003 = {m_type: NTI3658, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		if ((b_22657 < a_22656)) {
		Tmp1 = makeNimstrLit("index out of bounds, the container is empty");
		}
		else {
		Tmp1 = (makeNimstrLit("index ") || []).concat(cstrToNimstr((i_22655)+"") || [],makeNimstrLit(" not in ") || [],cstrToNimstr((a_22656)+"") || [],makeNimstrLit(" .. ") || [],cstrToNimstr((b_22657)+"") || []);
		}
		
		eHEX60gensym22802_23003.message = nimCopy(null, Tmp1, NTI138);
		eHEX60gensym22802_23003.parent = null;
		raiseException(eHEX60gensym22802_23003, "IndexError");

	
}

function raiseOverflow() {
		var eHEX60gensym22058_22203 = null;
		eHEX60gensym22058_22203 = {m_type: NTI3646, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		eHEX60gensym22058_22203.message = nimCopy(null, makeNimstrLit("over- or underflow"), NTI138);
		eHEX60gensym22058_22203.parent = null;
		raiseException(eHEX60gensym22058_22203, "OverflowError");

	
}

function sys_fatal_15062(message_15066) {
		var e_15203 = null;
		e_15203 = {m_type: NTI3650, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		e_15203.message = nimCopy(null, message_15066, NTI138);
		raiseException(e_15203, "AssertionError");

	
}

function raise_assert_15058(msg_15060) {
		sys_fatal_15062(msg_15060);

	
}

function failed_assert_impl_15266(msg_15268) {
		raise_assert_15058(msg_15268);

	
}

function $(str_208070) {
	var result_208071 = null;

		result_208071 = nimCopy(null, mnewString(0), NTI138);
		L1: do {
			var character_208214 = 0;
			var i_208245 = 0;
			var l_208246 = (str_208070 != null ? str_208070.length : 0);
			L2: do {
					L3: while (true) {
					if (!(i_208245 < l_208246)) break L3;
						character_208214 = str_208070[chckIndx(i_208245, 0, (str_208070 != null ? str_208070.length : 0)+0-1)-0];
						if (result_208071 != null) { addChar(result_208071, character_208214); } else { result_208071 = [character_208214]; };
						i_208245 = addInt(i_208245, 1);
						if (!(((str_208070 != null ? str_208070.length : 0) == l_208246))) {
						failed_assert_impl_15266(makeNimstrLit("iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);

	return result_208071;

}

function nsuJoinSep(a_165664, sep_165665) {
	var result_165666 = null;

		if ((0 < (a_165664 != null ? a_165664.length : 0))) {
		var l_165677 = mulInt((sep_165665 != null ? sep_165665.length : 0), subInt((a_165664 != null ? a_165664.length : 0), 1));
		L1: do {
			var i_165691 = 0;
			var colontmp__208310 = 0;
			colontmp__208310 = (a_165664 != null ? (a_165664.length-1) : -1);
			var res_208311 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_208311 <= colontmp__208310)) break L3;
						i_165691 = res_208311;
						l_165677 = addInt(l_165677, (a_165664[chckIndx(i_165691, 0, (a_165664 != null ? a_165664.length : 0)+0-1)-0] != null ? a_165664[chckIndx(i_165691, 0, (a_165664 != null ? a_165664.length : 0)+0-1)-0].length : 0));
						res_208311 = addInt(res_208311, 1);
					}
			} while(false);
		} while(false);
		result_165666 = nimCopy(null, mnewString(0), NTI138);
		if (result_165666 != null) { result_165666 = (result_165666).concat(a_165664[chckIndx(0, 0, (a_165664 != null ? a_165664.length : 0)+0-1)-0]); } else { result_165666 = a_165664[chckIndx(0, 0, (a_165664 != null ? a_165664.length : 0)+0-1)-0].slice(); };
		L4: do {
			var i_165711 = 0;
			var colontmp__208317 = 0;
			colontmp__208317 = (a_165664 != null ? (a_165664.length-1) : -1);
			var res_208318 = 1;
			L5: do {
					L6: while (true) {
					if (!(res_208318 <= colontmp__208317)) break L6;
						i_165711 = res_208318;
						if (result_165666 != null) { result_165666 = (result_165666).concat(sep_165665); } else { result_165666 = sep_165665.slice(); };
						if (result_165666 != null) { result_165666 = (result_165666).concat(a_165664[chckIndx(i_165711, 0, (a_165664 != null ? a_165664.length : 0)+0-1)-0]); } else { result_165666 = a_165664[chckIndx(i_165711, 0, (a_165664 != null ? a_165664.length : 0)+0-1)-0].slice(); };
						res_208318 = addInt(res_208318, 1);
					}
			} while(false);
		} while(false);
		}
		else {
			result_165666 = nimCopy(null, [], NTI138);
		}
		

	return result_165666;

}

function substr_30422(s_30424, first_30425, last_30426) {
	var result_30427 = null;

		var first_30428 = nimMax(first_30425, 0);
		var l_30430 = nimMax(addInt(subInt(nimMin(last_30426, (s_30424 != null ? (s_30424.length-1) : -1)), first_30428), 1), 0);
		result_30427 = nimCopy(null, mnewString(chckRange(l_30430, 0, 2147483647)), NTI138);
		L1: do {
			var i_30439 = 0;
			var colontmp__208332 = 0;
			colontmp__208332 = subInt(l_30430, 1);
			var res_208333 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_208333 <= colontmp__208332)) break L3;
						i_30439 = res_208333;
						result_30427[chckIndx(i_30439, 0, (result_30427 != null ? result_30427.length : 0)+0-1)-0] = s_30424[chckIndx(addInt(i_30439, first_30428), 0, (s_30424 != null ? s_30424.length : 0)+0-1)-0];
						res_208333 = addInt(res_208333, 1);
					}
			} while(false);
		} while(false);

	return result_30427;

}

function nsuSplitCharSet(s_161500, seps_161502, maxsplit_161504) {
	var result_161506 = null;

		result_161506 = nimCopy(null, [], NTI161522);
		L1: do {
			var xHEX60gensym161507_161523 = null;
			var lastHEX60gensym160861_208326 = 0;
			var splitsHEX60gensym160862_208327 = maxsplit_161504;
			L2: do {
					L3: while (true) {
					if (!(lastHEX60gensym160861_208326 <= (s_161500 != null ? s_161500.length : 0))) break L3;
						var firstHEX60gensym160863_208329 = lastHEX60gensym160861_208326;
						L4: do {
								L5: while (true) {
								if (!((lastHEX60gensym160861_208326 < (s_161500 != null ? s_161500.length : 0)) && !((seps_161502[s_161500[chckIndx(lastHEX60gensym160861_208326, 0, (s_161500 != null ? s_161500.length : 0)+0-1)-0]] != undefined)))) break L5;
									lastHEX60gensym160861_208326 = addInt(lastHEX60gensym160861_208326, 1);
								}
						} while(false);
						if ((splitsHEX60gensym160862_208327 == 0)) {
						lastHEX60gensym160861_208326 = (s_161500 != null ? s_161500.length : 0);
						}
						
						xHEX60gensym161507_161523 = substr_30422(s_161500, firstHEX60gensym160863_208329, subInt(lastHEX60gensym160861_208326, 1));
						var Tmp6 = nimCopy(null, xHEX60gensym161507_161523, NTI138);
						if (result_161506 != null) { result_161506.push(Tmp6); } else { result_161506 = [Tmp6]; };
						if ((splitsHEX60gensym160862_208327 == 0)) {
						break L2;
						}
						
						splitsHEX60gensym160862_208327 = subInt(splitsHEX60gensym160862_208327, 1);
						lastHEX60gensym160861_208326 = addInt(lastHEX60gensym160861_208326, 1);
					}
			} while(false);
		} while(false);

	return result_161506;

}

function nsuToLowerAsciiChar(c_160380) {
	var result_160381 = 0;

		if ((ConstSet2[c_160380] != undefined)) {
		result_160381 = chckRange(addInt(c_160380, 32), 0, 255);
		}
		else {
			result_160381 = c_160380;
		}
		

	return result_160381;

}

function nsuToLowerAsciiStr(s_160430) {
	var result_160431 = null;

		result_160431 = nimCopy(null, mnewString(chckRange((s_160430 != null ? s_160430.length : 0), 0, 2147483647)), NTI138);
		L1: do {
			var iHEX60gensym160432_160441 = 0;
			var colontmp__208339 = 0;
			colontmp__208339 = subInt((s_160430 != null ? s_160430.length : 0), 1);
			var res_208340 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_208340 <= colontmp__208339)) break L3;
						iHEX60gensym160432_160441 = res_208340;
						result_160431[chckIndx(iHEX60gensym160432_160441, 0, (result_160431 != null ? result_160431.length : 0)+0-1)-0] = nsuToLowerAsciiChar(s_160430[chckIndx(iHEX60gensym160432_160441, 0, (s_160430 != null ? s_160430.length : 0)+0-1)-0]);
						res_208340 = addInt(res_208340, 1);
					}
			} while(false);
		} while(false);

	return result_160431;

}

function get_str_183688(n_183690, default_183691) {
			var Tmp1;
			var Tmp2;

	var result_183692 = null;

	BeforeRet: do {
			if ((n_183690 == null)) Tmp1 = true; else {				Tmp1 = !((n_183690.kind == 4));			}		if (Tmp1) {
		result_183692 = nimCopy(null, default_183691, NTI138);
		break BeforeRet;
		}
		else {
			var Tmp2 = n_183690;
			if (ConstSet3[Tmp2.kind]===undefined) { raiseFieldError(makeNimstrLit("\'str\' is not accessible using discriminant \'kind\' of type \'JsonNodeObj\'")); }
			result_183692 = nimCopy(null, Tmp2.str, NTI138);
			break BeforeRet;
		}
		
	} while (false);

	return result_183692;

}

function raiseDivByZero() {
		var eHEX60gensym22257_22403 = null;
		eHEX60gensym22257_22403 = {m_type: NTI3644, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		eHEX60gensym22257_22403.message = nimCopy(null, makeNimstrLit("division by zero"), NTI138);
		eHEX60gensym22257_22403.parent = null;
		raiseException(eHEX60gensym22257_22403, "DivByZeroError");

	
}

function imul_47768(a_47770, b_47771) {
	var result_47772 = 0;

		var mask_47773 = 65535;
		var a_hi_47786 = (((a_47770 >>> 0) >>> 16) & mask_47773);
		var a_lo_47792 = (a_47770 & mask_47773);
		var b_hi_47805 = (((b_47771 >>> 0) >>> 16) & mask_47773);
		var b_lo_47811 = (b_47771 & mask_47773);
		result_47772 = ((((a_lo_47792 * b_lo_47811) >>> 0) + (((((a_hi_47786 * b_lo_47811) >>> 0) + ((a_lo_47792 * b_hi_47805) >>> 0)) >>> 0) << 16)) >>> 0);

	return result_47772;

}

function rotl32_48001(x_48003, r_48004) {
	var result_48005 = 0;

		result_48005 = ((x_48003 << r_48004) | ((x_48003 >>> 0) >>> subInt(32, r_48004)));

	return result_48005;

}

function murmur_hash_48037(x_48040) {
	var result_48041 = 0;

	BeforeRet: do {
		var size_48051 = (x_48040 != null ? x_48040.length : 0);
		var step_size_48053 = 4;
		var n_48054 = divInt(size_48051, step_size_48053);
		var h1_48055 = 0;
		var i_48057 = 0;
		L1: do {
				L2: while (true) {
				if (!(i_48057 < mulInt(n_48054, step_size_48053))) break L2;
					var k1_48058 = 0;
					var j_48059 = step_size_48053;
					L3: do {
							L4: while (true) {
							if (!(0 < j_48059)) break L4;
								j_48059 = subInt(j_48059, 1);
								k1_48058 = ((k1_48058 << 8) | x_48040[chckIndx(addInt(i_48057, j_48059), 0, (x_48040 != null ? x_48040.length : 0)+0-1)-0]);
							}
					} while(false);
					i_48057 = addInt(i_48057, step_size_48053);
					k1_48058 = imul_47768(k1_48058, 3432918353);
					k1_48058 = rotl32_48001(k1_48058, 15);
					k1_48058 = imul_47768(k1_48058, 461845907);
					h1_48055 = (h1_48055 ^ k1_48058);
					h1_48055 = rotl32_48001(h1_48055, 13);
					h1_48055 = ((((h1_48055 * 5) >>> 0) + 3864292196) >>> 0);
				}
		} while(false);
		var k1_48223 = 0;
		var rem_48224 = modInt(size_48051, step_size_48053);
		L5: do {
				L6: while (true) {
				if (!(0 < rem_48224)) break L6;
					rem_48224 = subInt(rem_48224, 1);
					k1_48223 = ((k1_48223 << 8) | x_48040[chckIndx(addInt(i_48057, rem_48224), 0, (x_48040 != null ? x_48040.length : 0)+0-1)-0]);
				}
		} while(false);
		k1_48223 = imul_47768(k1_48223, 3432918353);
		k1_48223 = rotl32_48001(k1_48223, 15);
		k1_48223 = imul_47768(k1_48223, 461845907);
		h1_48055 = (h1_48055 ^ k1_48223);
		h1_48055 = (h1_48055 ^ size_48051);
		h1_48055 = (h1_48055 ^ ((h1_48055 >>> 0) >>> 16));
		h1_48055 = imul_47768(h1_48055, 2246822507);
		h1_48055 = (h1_48055 ^ ((h1_48055 >>> 0) >>> 13));
		h1_48055 = imul_47768(h1_48055, 3266489909);
		h1_48055 = (h1_48055 ^ ((h1_48055 >>> 0) >>> 16));
		result_48041 = (h1_48055|0);
		break BeforeRet;
	} while (false);

	return result_48041;

}

function hash_48814(x_48816) {
	var result_48817 = 0;

		result_48817 = murmur_hash_48037((x_48816.slice(0, (x_48816 != null ? (x_48816.length-1) : -1)+1)));

	return result_48817;

}

function is_filled_69018(hcode_69020) {
	var result_69021 = false;

		result_69021 = !((hcode_69020 == 0));

	return result_69021;

}

function next_try_69035(h_69037, max_hash_69038) {
	var result_69039 = 0;

		result_69039 = (addInt(h_69037, 1) & max_hash_69038);

	return result_69039;

}

function raw_get_192333(t_192337, key_192338, hc_192339, hc_192339_Idx) {
						var Tmp3;

	var result_192340 = 0;

	BeforeRet: do {
		hc_192339[hc_192339_Idx] = hash_48814(key_192338);
		if ((hc_192339[hc_192339_Idx] == 0)) {
		hc_192339[hc_192339_Idx] = 314159265;
		}
		
		if (((t_192337.data != null ? t_192337.data.length : 0) == 0)) {
		result_192340 = -1;
		break BeforeRet;
		}
		
		var h_192482 = (hc_192339[hc_192339_Idx] & (t_192337.data != null ? (t_192337.data.length-1) : -1));
		L1: do {
				L2: while (true) {
				if (!is_filled_69018(t_192337.data[chckIndx(h_192482, 0, (t_192337.data != null ? t_192337.data.length : 0)+0-1)-0].Field0)) break L2;
						if (!(t_192337.data[chckIndx(h_192482, 0, (t_192337.data != null ? t_192337.data.length : 0)+0-1)-0].Field0 == hc_192339[hc_192339_Idx])) Tmp3 = false; else {							Tmp3 = eqStrings(t_192337.data[chckIndx(h_192482, 0, (t_192337.data != null ? t_192337.data.length : 0)+0-1)-0].Field2, key_192338);						}					if (Tmp3) {
					result_192340 = h_192482;
					break BeforeRet;
					}
					
					h_192482 = next_try_69035(h_192482, (t_192337.data != null ? (t_192337.data.length-1) : -1));
				}
		} while(false);
		result_192340 = subInt(-1, h_192482);
	} while (false);

	return result_192340;

}

function HEX5BHEX5D_192322(t_192328, key_192329) {
	var result_192331 = null;
	var result_192331_Idx = 0;

		var hcHEX60gensym70648_192332 = [0];
		var indexHEX60gensym70649_192950 = raw_get_192333(t_192328, key_192329, hcHEX60gensym70648_192332, 0);
		if ((0 <= indexHEX60gensym70649_192950)) {
		result_192331 = t_192328.data[chckIndx(indexHEX60gensym70649_192950, 0, (t_192328.data != null ? t_192328.data.length : 0)+0-1)-0]; result_192331_Idx = "Field3";
		}
		else {
			var eHEX60gensym193203_193403 = null;
			eHEX60gensym193203_193403 = {m_type: NTI3654, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
			eHEX60gensym193203_193403.message = nimCopy(null, (makeNimstrLit("key not found: ") || []).concat(key_192329 || []), NTI138);
			eHEX60gensym193203_193403.parent = null;
			raiseException(eHEX60gensym193203_193403, "KeyError");
		}
		

	return [result_192331, result_192331_Idx];

}

function HEX5BHEX5D_193856(node_193858, name_193859) {
		var Tmp1;
		var Tmp2;

	var result_193860 = null;

		if (!(!((node_193858 == null)))) {
		failed_assert_impl_15266(makeNimstrLit("json.nim(476, 9) `not isNil(node)` "));
		}
		
		if (!((node_193858.kind == 5))) {
		failed_assert_impl_15266(makeNimstrLit("json.nim(477, 9) `node.kind == JObject` "));
		}
		
		var Tmp1 = node_193858;
		if (ConstSet4[Tmp1.kind]===undefined) { raiseFieldError(makeNimstrLit("\'fields\' is not accessible using discriminant \'kind\' of type \'JsonNodeObj\'")); }
		result_193860 = (Tmp2 = HEX5BHEX5D_192322(Tmp1.fields, name_193859), Tmp2)[0][Tmp2[1]];

	return result_193860;

}

function get_symb(node_208293) {
	var result_208294 = null;

		result_208294 = nimCopy(null, nsuJoinSep(nsuSplitCharSet(nsuToLowerAsciiStr(get_str_183688(HEX5BHEX5D_193856(node_208293, makeNimstrLit("symbol")), [])), ConstSet5, -1), []), NTI138);

	return result_208294;

}

function nsuFindChar(s_166016, sub_166017, start_166018, last_166019) {
		var Tmp1;

	var result_166021 = 0;

	BeforeRet: do {
		if ((last_166019 == 0)) {
		Tmp1 = (s_166016 != null ? (s_166016.length-1) : -1);
		}
		else {
		Tmp1 = last_166019;
		}
		
		var last_166023 = Tmp1;
		L2: do {
			var i_166406 = 0;
			var colontmp__208383 = 0;
			colontmp__208383 = start_166018;
			var res_208384 = colontmp__208383;
			L3: do {
					L4: while (true) {
					if (!(res_208384 <= last_166023)) break L4;
						i_166406 = res_208384;
						if ((sub_166017 == s_166016[chckIndx(i_166406, 0, (s_166016 != null ? s_166016.length : 0)+0-1)-0])) {
						result_166021 = i_166406;
						break BeforeRet;
						}
						
						res_208384 = addInt(res_208384, 1);
					}
			} while(false);
		} while(false);
		result_166021 = -1;
		break BeforeRet;
	} while (false);

	return result_166021;

}

function nsuInitSkipTable(a_165749, sub_165750) {
		var m_165751 = (sub_165750 != null ? sub_165750.length : 0);
		var i_165753 = 0;
		L1: do {
				L2: while (true) {
				if (!(i_165753 <= 248)) break L2;
					a_165749[chckIndx(chckRange(addInt(i_165753, 0), 0, 255), 0, (a_165749 != null ? a_165749.length : 0)+0-1)-0] = m_165751;
					a_165749[chckIndx(chckRange(addInt(i_165753, 1), 0, 255), 0, (a_165749 != null ? a_165749.length : 0)+0-1)-0] = m_165751;
					a_165749[chckIndx(chckRange(addInt(i_165753, 2), 0, 255), 0, (a_165749 != null ? a_165749.length : 0)+0-1)-0] = m_165751;
					a_165749[chckIndx(chckRange(addInt(i_165753, 3), 0, 255), 0, (a_165749 != null ? a_165749.length : 0)+0-1)-0] = m_165751;
					a_165749[chckIndx(chckRange(addInt(i_165753, 4), 0, 255), 0, (a_165749 != null ? a_165749.length : 0)+0-1)-0] = m_165751;
					a_165749[chckIndx(chckRange(addInt(i_165753, 5), 0, 255), 0, (a_165749 != null ? a_165749.length : 0)+0-1)-0] = m_165751;
					a_165749[chckIndx(chckRange(addInt(i_165753, 6), 0, 255), 0, (a_165749 != null ? a_165749.length : 0)+0-1)-0] = m_165751;
					a_165749[chckIndx(chckRange(addInt(i_165753, 7), 0, 255), 0, (a_165749 != null ? a_165749.length : 0)+0-1)-0] = m_165751;
					i_165753 = addInt(i_165753, 8);
				}
		} while(false);
		L3: do {
			var i_165770 = 0;
			var colontmp__208391 = 0;
			colontmp__208391 = subInt(m_165751, 1);
			var i_208392 = 0;
			L4: do {
					L5: while (true) {
					if (!(i_208392 < colontmp__208391)) break L5;
						i_165770 = i_208392;
						a_165749[chckIndx(sub_165750[chckIndx(i_165770, 0, (sub_165750 != null ? sub_165750.length : 0)+0-1)-0], 0, (a_165749 != null ? a_165749.length : 0)+0-1)-0] = subInt(subInt(m_165751, 1), i_165770);
						i_208392 = addInt(i_208392, 1);
					}
			} while(false);
		} while(false);

	
}

function nsuFindStrA(a_165786, s_165787, sub_165788, start_165789, last_165790) {
		var Tmp1;

	var result_165792 = 0;

	BeforeRet: do {
		if ((last_165790 == 0)) {
		Tmp1 = (s_165787 != null ? (s_165787.length-1) : -1);
		}
		else {
		Tmp1 = last_165790;
		}
		
		var last_165794 = Tmp1;
		var sub_last_165795 = subInt((sub_165788 != null ? sub_165788.length : 0), 1);
		if ((sub_last_165795 == -1)) {
		result_165792 = start_165789;
		break BeforeRet;
		}
		
		var skip_165797 = start_165789;
		L2: do {
				L3: while (true) {
				if (!(sub_last_165795 <= subInt(last_165794, skip_165797))) break L3;
					var i_165798 = sub_last_165795;
					L4: do {
							L5: while (true) {
							if (!(s_165787[chckIndx(addInt(skip_165797, i_165798), 0, (s_165787 != null ? s_165787.length : 0)+0-1)-0] == sub_165788[chckIndx(i_165798, 0, (sub_165788 != null ? sub_165788.length : 0)+0-1)-0])) break L5;
								if ((i_165798 == 0)) {
								result_165792 = skip_165797;
								break BeforeRet;
								}
								
								i_165798 = subInt(i_165798, 1);
							}
					} while(false);
					skip_165797 = addInt(skip_165797, a_165786[chckIndx(s_165787[chckIndx(addInt(skip_165797, sub_last_165795), 0, (s_165787 != null ? s_165787.length : 0)+0-1)-0], 0, (a_165786 != null ? a_165786.length : 0)+0-1)-0]);
				}
		} while(false);
		result_165792 = -1;
		break BeforeRet;
	} while (false);

	return result_165792;

}

function nsuFindStr(s_166654, sub_166655, start_166656, last_166657) {
	var result_166659 = 0;

	BeforeRet: do {
		if (((s_166654 != null ? s_166654.length : 0) < (sub_166655 != null ? sub_166655.length : 0))) {
		result_166659 = -1;
		break BeforeRet;
		}
		
		if (((sub_166655 != null ? sub_166655.length : 0) == 1)) {
		result_166659 = nsuFindChar(s_166654, sub_166655[chckIndx(0, 0, (sub_166655 != null ? sub_166655.length : 0)+0-1)-0], start_166656, last_166657);
		break BeforeRet;
		}
		
		var a_166661 = [new Int32Array(256)];
		nsuInitSkipTable(a_166661[0], sub_166655);
		result_166659 = nsuFindStrA(a_166661[0], s_166654, sub_166655, start_166656, last_166657);
	} while (false);

	return result_166659;

}

function contains_167277(s_167279, sub_167280) {
	var result_167281 = false;

	BeforeRet: do {
		result_167281 = (0 <= nsuFindStr(s_167279, sub_167280, 0, 0));
		break BeforeRet;
	} while (false);

	return result_167281;

}

function metal_status(element_208352) {
	var result_208353 = null;

		if ((contains_167277(get_str_183688(HEX5BHEX5D_193856(element_208352, makeNimstrLit("category")), []), makeNimstrLit("metalloid")) || contains_167277(get_str_183688(HEX5BHEX5D_193856(element_208352, makeNimstrLit("category")), []), makeNimstrLit("nonmetal")))) {
		result_208353 = nimCopy(null, makeNimstrLit("non-metal"), NTI138);
		}
		else {
		if (contains_167277(get_str_183688(HEX5BHEX5D_193856(element_208352, makeNimstrLit("category")), []), makeNimstrLit("noble gas"))) {
		result_208353 = nimCopy(null, makeNimstrLit("noble gas"), NTI138);
		}
		else {
			result_208353 = nimCopy(null, makeNimstrLit("metal"), NTI138);
		}
		}

	return result_208353;

}

function get_var_type_202709(x_202711) {
	var result_202712 = 0;

	BeforeRet: do {
		result_202712 = 0;
		switch (toJSStr(cstrToNimstr(Object.prototype.toString.call(x_202711)))) {
		case "[object Array]":
			result_202712 = 6;
			break BeforeRet;
			break;
		case "[object Object]":
			result_202712 = 5;
			break BeforeRet;
			break;
		case "[object Number]":
			if ((x_202711 % 1.0000000000000000e+00 == 0.0)) {
			result_202712 = 2;
			break BeforeRet;
			}
			else {
				result_202712 = 3;
				break BeforeRet;
			}
			
			break;
		case "[object Boolean]":
			result_202712 = 1;
			break BeforeRet;
			break;
		case "[object Null]":
			result_202712 = 0;
			break BeforeRet;
			break;
		case "[object String]":
			result_202712 = 4;
			break BeforeRet;
			break;
		default: 
			if (true) {
			failed_assert_impl_15266(makeNimstrLit("json.nim(901, 18) `false` "));
			}
			
			break;
		}
	} while (false);

	return result_202712;

}

function new_jarray_183657() {
	var result_183659 = null;

		result_183659 = {kind: 6, elems: [], str: null, num: 0, fnum: 0.0, bval: false, fields: {data: null, counter: 0, first: 0, last: 0}};

	return result_183659;

}

function len_202829(x_202831) {
	var result_202832 = 0;

		if (!((get_var_type_202709(x_202831) == 6))) {
		failed_assert_impl_15266(makeNimstrLit("json.nim(904, 12) `x.getVarType == JArray` "));
		}
		
		      result_202832 = x_202831.length;
    

	return result_202832;

}

function add_183995(father_183997, child_183998) {
		var Tmp1;
		var Tmp2;

		if (!((father_183997.kind == 6))) {
		failed_assert_impl_15266(makeNimstrLit("json.nim(284, 10) `father.kind == JArray` "));
		}
		
		var Tmp1 = father_183997;
		if (ConstSet6[Tmp1.kind]===undefined) { raiseFieldError(makeNimstrLit("\'elems\' is not accessible using discriminant \'kind\' of type \'JsonNodeObj\'")); }
		if ((Tmp2 = Tmp1.elems, Tmp2) != null) { Tmp2.push(child_183998); } else { Tmp2 = [child_183998]; };

	
}

function HEX5BHEX5D_203214(x_203216, y_203217) {
	var result_203218 = {};

		if (!((get_var_type_202709(x_203216) == 6))) {
		failed_assert_impl_15266(makeNimstrLit("json.nim(916, 12) `x.getVarType == JArray` "));
		}
		
		      result_203218 = x_203216[y_203217];
    

	return result_203218;

}

function is_power_of_two_62062(x_62064) {
		var Tmp1;

	var result_62065 = false;

	BeforeRet: do {
		if (!(0 < x_62064)) Tmp1 = false; else {			Tmp1 = ((x_62064 & (x_62064 - 1)) == 0);		}		result_62065 = Tmp1;
		break BeforeRet;
	} while (false);

	return result_62065;

}

function init_ordered_table_183209(initial_size_183213) {
	var result_183215 = {data: null, counter: 0, first: 0, last: 0};

		if (!(is_power_of_two_62062(initial_size_183213))) {
		failed_assert_impl_15266(makeNimstrLit("tableimpl.nim(118, 10) `isPowerOfTwo(initialSize)` "));
		}
		
		result_183215.counter = 0;
		result_183215.data = new Array(chckRange(initial_size_183213, 0, 2147483647)); for (var i=0;i<chckRange(initial_size_183213, 0, 2147483647);++i) {result_183215.data[i]={Field0: 0, Field1: 0, Field2: null, Field3: null};}		result_183215.first = -1;
		result_183215.last = -1;

	return result_183215;

}

function new_jobject_183204() {
	var result_183206 = null;

		result_183206 = {kind: 5, fields: init_ordered_table_183209(4), str: null, num: 0, fnum: 0.0, bval: false, elems: null};

	return result_183206;

}

function raw_get_185021(t_185026, key_185027, hc_185028, hc_185028_Idx) {
						var Tmp3;

	var result_185029 = 0;

	BeforeRet: do {
		hc_185028[hc_185028_Idx] = hash_48814(key_185027);
		if ((hc_185028[hc_185028_Idx] == 0)) {
		hc_185028[hc_185028_Idx] = 314159265;
		}
		
		if (((t_185026.data != null ? t_185026.data.length : 0) == 0)) {
		result_185029 = -1;
		break BeforeRet;
		}
		
		var h_185171 = (hc_185028[hc_185028_Idx] & (t_185026.data != null ? (t_185026.data.length-1) : -1));
		L1: do {
				L2: while (true) {
				if (!is_filled_69018(t_185026.data[chckIndx(h_185171, 0, (t_185026.data != null ? t_185026.data.length : 0)+0-1)-0].Field0)) break L2;
						if (!(t_185026.data[chckIndx(h_185171, 0, (t_185026.data != null ? t_185026.data.length : 0)+0-1)-0].Field0 == hc_185028[hc_185028_Idx])) Tmp3 = false; else {							Tmp3 = eqStrings(t_185026.data[chckIndx(h_185171, 0, (t_185026.data != null ? t_185026.data.length : 0)+0-1)-0].Field2, key_185027);						}					if (Tmp3) {
					result_185029 = h_185171;
					break BeforeRet;
					}
					
					h_185171 = next_try_69035(h_185171, (t_185026.data != null ? (t_185026.data.length-1) : -1));
				}
		} while(false);
		result_185029 = subInt(-1, h_185171);
	} while (false);

	return result_185029;

}

function must_rehash_69053(length_69055, counter_69056) {
	var result_69057 = false;

		if (!((counter_69056 < length_69055))) {
		failed_assert_impl_15266(makeNimstrLit("hashcommon.nim(33, 9) `length > counter` "));
		}
		
		result_69057 = ((mulInt(length_69055, 2) < mulInt(counter_69056, 3)) || (subInt(length_69055, counter_69056) < 4));

	return result_69057;

}

function raw_insert_187465(t_187471, data_187474, data_187474_Idx, key_187475, val_187476, hc_187477, h_187478) {
		data_187474[data_187474_Idx][chckIndx(h_187478, 0, (data_187474[data_187474_Idx] != null ? data_187474[data_187474_Idx].length : 0)+0-1)-0].Field2 = nimCopy(null, key_187475, NTI138);
		data_187474[data_187474_Idx][chckIndx(h_187478, 0, (data_187474[data_187474_Idx] != null ? data_187474[data_187474_Idx].length : 0)+0-1)-0].Field3 = val_187476;
		data_187474[data_187474_Idx][chckIndx(h_187478, 0, (data_187474[data_187474_Idx] != null ? data_187474[data_187474_Idx].length : 0)+0-1)-0].Field0 = hc_187477;
		data_187474[data_187474_Idx][chckIndx(h_187478, 0, (data_187474[data_187474_Idx] != null ? data_187474[data_187474_Idx].length : 0)+0-1)-0].Field1 = -1;
		if ((t_187471.first < 0)) {
		t_187471.first = h_187478;
		}
		
		if ((0 <= t_187471.last)) {
		data_187474[data_187474_Idx][chckIndx(t_187471.last, 0, (data_187474[data_187474_Idx] != null ? data_187474[data_187474_Idx].length : 0)+0-1)-0].Field1 = h_187478;
		}
		
		t_187471.last = h_187478;

	
}

function enlarge_186367(t_186373) {
		var n_186381 = null;
		n_186381 = new Array(chckRange(mulInt((t_186373.data != null ? t_186373.data.length : 0), 2), 0, 2147483647)); for (var i=0;i<chckRange(mulInt((t_186373.data != null ? t_186373.data.length : 0), 2), 0, 2147483647);++i) {n_186381[i]={Field0: 0, Field1: 0, Field2: null, Field3: null};}		var h_186520 = t_186373.first;
		t_186373.first = -1;
		t_186373.last = -1;
		var Tmp1 = t_186373.data; t_186373.data = n_186381; n_186381 = Tmp1;		L2: do {
				L3: while (true) {
				if (!(0 <= h_186520)) break L3;
					var nxt_186679 = n_186381[chckIndx(h_186520, 0, (n_186381 != null ? n_186381.length : 0)+0-1)-0].Field1;
					var eh_186828 = n_186381[chckIndx(h_186520, 0, (n_186381 != null ? n_186381.length : 0)+0-1)-0].Field0;
					if (is_filled_69018(eh_186828)) {
					var j_186835 = (eh_186828 & (t_186373.data != null ? (t_186373.data.length-1) : -1));
					L4: do {
							L5: while (true) {
							if (!is_filled_69018(t_186373.data[chckIndx(j_186835, 0, (t_186373.data != null ? t_186373.data.length : 0)+0-1)-0].Field0)) break L5;
								j_186835 = next_try_69035(j_186835, (t_186373.data != null ? (t_186373.data.length-1) : -1));
							}
					} while(false);
					raw_insert_187465(t_186373, t_186373, "data", n_186381[chckIndx(h_186520, 0, (n_186381 != null ? n_186381.length : 0)+0-1)-0].Field2, n_186381[chckIndx(h_186520, 0, (n_186381 != null ? n_186381.length : 0)+0-1)-0].Field3, n_186381[chckIndx(h_186520, 0, (n_186381 != null ? n_186381.length : 0)+0-1)-0].Field0, j_186835);
					}
					
					h_186520 = nxt_186679;
				}
		} while(false);

	
}

function raw_get_known_hc_188267(t_188272, key_188273, hc_188274) {
	var result_188275 = 0;

	BeforeRet: do {
		if (((t_188272.data != null ? t_188272.data.length : 0) == 0)) {
		result_188275 = -1;
		break BeforeRet;
		}
		
		var h_188414 = (hc_188274 & (t_188272.data != null ? (t_188272.data.length-1) : -1));
		L1: do {
				L2: while (true) {
				if (!is_filled_69018(t_188272.data[chckIndx(h_188414, 0, (t_188272.data != null ? t_188272.data.length : 0)+0-1)-0].Field0)) break L2;
					if (((t_188272.data[chckIndx(h_188414, 0, (t_188272.data != null ? t_188272.data.length : 0)+0-1)-0].Field0 == hc_188274) && eqStrings(t_188272.data[chckIndx(h_188414, 0, (t_188272.data != null ? t_188272.data.length : 0)+0-1)-0].Field2, key_188273))) {
					result_188275 = h_188414;
					break BeforeRet;
					}
					
					h_188414 = next_try_69035(h_188414, (t_188272.data != null ? (t_188272.data.length-1) : -1));
				}
		} while(false);
		result_188275 = subInt(-1, h_188414);
	} while (false);

	return result_188275;

}

function HEX5BHEX5DHEX3D_184511(t_184517, key_184518, val_184519) {
		if (((t_184517.data != null ? t_184517.data.length : 0) == 0)) {
		if (!(is_power_of_two_62062(64))) {
		failed_assert_impl_15266(makeNimstrLit("tableimpl.nim(118, 10) `isPowerOfTwo(defaultInitialSize)` "));
		}
		
		t_184517.counter = 0;
		t_184517.data = new Array(64); for (var i=0;i<64;++i) {t_184517.data[i]={Field0: 0, Field1: 0, Field2: null, Field3: null};}		t_184517.first = -1;
		t_184517.last = -1;
		}
		
		var hc_185001 = [0];
		var index_185639 = raw_get_185021(t_184517, key_184518, hc_185001, 0);
		if ((0 <= index_185639)) {
		t_184517.data[chckIndx(index_185639, 0, (t_184517.data != null ? t_184517.data.length : 0)+0-1)-0].Field3 = val_184519;
		}
		else {
			if (((t_184517.data != null ? t_184517.data.length : 0) == 0)) {
			if (!(is_power_of_two_62062(64))) {
			failed_assert_impl_15266(makeNimstrLit("tableimpl.nim(118, 10) `isPowerOfTwo(defaultInitialSize)` "));
			}
			
			t_184517.counter = 0;
			t_184517.data = new Array(64); for (var i=0;i<64;++i) {t_184517.data[i]={Field0: 0, Field1: 0, Field2: null, Field3: null};}			t_184517.first = -1;
			t_184517.last = -1;
			}
			
			if (must_rehash_69053((t_184517.data != null ? t_184517.data.length : 0), t_184517.counter)) {
			enlarge_186367(t_184517);
			index_185639 = raw_get_known_hc_188267(t_184517, key_184518, hc_185001[0]);
			}
			
			index_185639 = subInt(-1, index_185639);
			raw_insert_187465(t_184517, t_184517, "data", key_184518, val_184519, hc_185001[0], index_185639);
			t_184517.counter = addInt(t_184517.counter, 1);
		}
		

	
}

function HEX5BHEX5DHEX3D_189414(obj_189416, key_189417, val_189418) {
		var Tmp1;

		if (!((obj_189416.kind == 5))) {
		failed_assert_impl_15266(makeNimstrLit("json.nim(358, 9) `obj.kind == JObject` "));
		}
		
		var Tmp1 = obj_189416;
		if (ConstSet7[Tmp1.kind]===undefined) { raiseFieldError(makeNimstrLit("\'fields\' is not accessible using discriminant \'kind\' of type \'JsonNodeObj\'")); }
		HEX5BHEX5DHEX3D_184511(Tmp1.fields, key_189417, val_189418);

	
}

function new_jint_183137(n_183139) {
	var result_183140 = null;

		result_183140 = {kind: 2, num: n_183139, str: null, fnum: 0.0, bval: false, fields: {data: null, counter: 0, first: 0, last: 0}, elems: null};

	return result_183140;

}

function new_jfloat_183154(n_183156) {
	var result_183157 = null;

		result_183157 = {kind: 3, fnum: n_183156, str: null, num: 0, bval: false, fields: {data: null, counter: 0, first: 0, last: 0}, elems: null};

	return result_183157;

}

function new_jstring_183087(s_183089) {
	var result_183090 = null;

		result_183090 = {kind: 4, str: nimCopy(null, s_183089, NTI138), num: 0, fnum: 0.0, bval: false, fields: {data: null, counter: 0, first: 0, last: 0}, elems: null};

	return result_183090;

}

function new_jbool_183171(b_183173) {
	var result_183174 = null;

		result_183174 = {kind: 1, bval: b_183173, str: null, num: 0, fnum: 0.0, fields: {data: null, counter: 0, first: 0, last: 0}, elems: null};

	return result_183174;

}

function new_jnull_183188() {
	var result_183190 = null;

		result_183190 = {kind: 0, str: null, num: 0, fnum: 0.0, bval: false, fields: {data: null, counter: 0, first: 0, last: 0}, elems: null};

	return result_183190;

}

function convert_object_203414(x_203416) {
	var result_203417 = null;

		switch (get_var_type_202709(x_203416)) {
		case 6:
			result_203417 = new_jarray_183657();
			L1: do {
				var i_203425 = 0;
				var colontmp__210289 = 0;
				colontmp__210289 = len_202829(x_203416);
				var i_210290 = 0;
				L2: do {
						L3: while (true) {
						if (!(i_210290 < colontmp__210289)) break L3;
							i_203425 = i_210290;
							add_183995(result_203417, convert_object_203414(HEX5BHEX5D_203214(x_203416, i_203425)));
							i_210290 = addInt(i_210290, 1);
						}
				} while(false);
			} while(false);
			break;
		case 5:
			result_203417 = new_jobject_183204();
			for (var property in x_203416) {
        if (x_203416.hasOwnProperty(property)) {
      
			var nim_property_203427 = null;
			var nim_value_203428 = {};
			nim_property_203427 = property; nim_value_203428 = x_203416[property];
			HEX5BHEX5DHEX3D_189414(result_203417, cstrToNimstr(nim_property_203427), convert_object_203414(nim_value_203428));
			}}
			break;
		case 2:
			result_203417 = new_jint_183137(x_203416);
			break;
		case 3:
			result_203417 = new_jfloat_183154(x_203416);
			break;
		case 4:
			result_203417 = new_jstring_183087(cstrToNimstr(x_203416));
			break;
		case 1:
			result_203417 = new_jbool_183171(x_203416);
			break;
		case 0:
			result_203417 = new_jnull_183188();
			break;
		}

	return result_203417;

}

function parse_json_203457(buffer_203459) {
	var result_203460 = null;

	BeforeRet: do {
		result_203460 = convert_object_203414(JSON.parse(toJSStr(buffer_203459)));
		break BeforeRet;
	} while (false);

	return result_203460;

}

function nsuStrip(s_169278, leading_169279, trailing_169280, chars_169282) {
					var Tmp5;

	var result_169283 = null;

		var first_169285 = 0;
		var last_169286 = subInt((s_169278 != null ? s_169278.length : 0), 1);
		if (leading_169279) {
		L1: do {
				L2: while (true) {
				if (!((first_169285 <= last_169286) && (chars_169282[s_169278[chckIndx(first_169285, 0, (s_169278 != null ? s_169278.length : 0)+0-1)-0]] != undefined))) break L2;
					first_169285 = addInt(first_169285, 1);
				}
		} while(false);
		}
		
		if (trailing_169280) {
		L3: do {
				L4: while (true) {
					if (!(0 <= last_169286)) Tmp5 = false; else {						Tmp5 = (chars_169282[s_169278[chckIndx(last_169286, 0, (s_169278 != null ? s_169278.length : 0)+0-1)-0]] != undefined);					}				if (!Tmp5) break L4;
					last_169286 = subInt(last_169286, 1);
				}
		} while(false);
		}
		
		result_169283 = nimCopy(null, substr_30422(s_169278, first_169285, last_169286), NTI138);

	return result_169283;

}

function binary_search_90759(c_90761, tab_90763, len_90764, stride_90765) {
			var Tmp3;

	var result_90766 = 0;

	BeforeRet: do {
		var n_90767 = len_90764;
		var t_90769 = 0;
		L1: do {
				L2: while (true) {
				if (!(1 < n_90767)) break L2;
					var m_90772 = divInt(n_90767, 2);
					var p_90773 = addInt(t_90769, mulInt(m_90772, stride_90765));
					if ((tab_90763[chckIndx(p_90773, 0, (tab_90763 != null ? tab_90763.length : 0)+0-1)-0] <= ((c_90761)|0))) {
					t_90769 = p_90773;
					n_90767 = subInt(n_90767, m_90772);
					}
					else {
						n_90767 = m_90772;
					}
					
				}
		} while(false);
			if (!!((n_90767 == 0))) Tmp3 = false; else {				Tmp3 = (tab_90763[chckIndx(t_90769, 0, (tab_90763 != null ? tab_90763.length : 0)+0-1)-0] <= ((c_90761)|0));			}		if (Tmp3) {
		result_90766 = t_90769;
		break BeforeRet;
		}
		
		result_90766 = -1;
		break BeforeRet;
	} while (false);

	return result_90766;

}

function nuctoLower(c_90790) {
			var Tmp1;
			var Tmp2;
			var Tmp3;

	var result_90791 = 0;

	BeforeRet: do {
		var c_90792 = c_90790;
		var p_90816 = binary_search_90759(c_90792, [65, 90, 532, 192, 214, 532, 216, 222, 532, 393, 394, 705, 433, 434, 717, 904, 906, 537, 910, 911, 563, 913, 929, 532, 931, 939, 532, 1021, 1023, 370, 1024, 1039, 580, 1040, 1071, 532, 1329, 1366, 548, 4256, 4293, 7764, 5024, 5103, 39364, 5104, 5109, 508, 7312, 7354, -2508, 7357, 7359, -2508, 7944, 7951, 492, 7960, 7965, 492, 7976, 7983, 492, 7992, 7999, 492, 8008, 8013, 492, 8040, 8047, 492, 8072, 8079, 492, 8088, 8095, 492, 8104, 8111, 492, 8120, 8121, 492, 8122, 8123, 426, 8136, 8139, 414, 8152, 8153, 492, 8154, 8155, 400, 8168, 8169, 492, 8170, 8171, 388, 8184, 8185, 372, 8186, 8187, 374, 11264, 11310, 548, 11390, 11391, -10315, 65313, 65338, 532, 66560, 66599, 540, 66736, 66771, 540, 68736, 68786, 564, 71840, 71871, 532, 93760, 93791, 532, 125184, 125217, 534], 45, 3);
			if (!(0 <= p_90816)) Tmp2 = false; else {				Tmp2 = (to_lower_ranges_86892[chckIndx(p_90816, 0, (to_lower_ranges_86892 != null ? to_lower_ranges_86892.length : 0)+0-1)-0] <= ((c_90792)|0));			}			if (!Tmp2) Tmp1 = false; else {				Tmp1 = (((c_90792)|0) <= to_lower_ranges_86892[chckIndx(addInt(p_90816, 1), 0, (to_lower_ranges_86892 != null ? to_lower_ranges_86892.length : 0)+0-1)-0]);			}		if (Tmp1) {
		result_90791 = subInt(addInt(((c_90792)|0), to_lower_ranges_86892[chckIndx(addInt(p_90816, 2), 0, (to_lower_ranges_86892 != null ? to_lower_ranges_86892.length : 0)+0-1)-0]), 500);
		break BeforeRet;
		}
		
		p_90816 = binary_search_90759(c_90792, [256, 501, 258, 501, 260, 501, 262, 501, 264, 501, 266, 501, 268, 501, 270, 501, 272, 501, 274, 501, 276, 501, 278, 501, 280, 501, 282, 501, 284, 501, 286, 501, 288, 501, 290, 501, 292, 501, 294, 501, 296, 501, 298, 501, 300, 501, 302, 501, 304, 301, 306, 501, 308, 501, 310, 501, 313, 501, 315, 501, 317, 501, 319, 501, 321, 501, 323, 501, 325, 501, 327, 501, 330, 501, 332, 501, 334, 501, 336, 501, 338, 501, 340, 501, 342, 501, 344, 501, 346, 501, 348, 501, 350, 501, 352, 501, 354, 501, 356, 501, 358, 501, 360, 501, 362, 501, 364, 501, 366, 501, 368, 501, 370, 501, 372, 501, 374, 501, 376, 379, 377, 501, 379, 501, 381, 501, 385, 710, 386, 501, 388, 501, 390, 706, 391, 501, 395, 501, 398, 579, 399, 702, 400, 703, 401, 501, 403, 705, 404, 707, 406, 711, 407, 709, 408, 501, 412, 711, 413, 713, 415, 714, 416, 501, 418, 501, 420, 501, 422, 718, 423, 501, 425, 718, 428, 501, 430, 718, 431, 501, 435, 501, 437, 501, 439, 719, 440, 501, 444, 501, 452, 502, 453, 501, 455, 502, 456, 501, 458, 502, 459, 501, 461, 501, 463, 501, 465, 501, 467, 501, 469, 501, 471, 501, 473, 501, 475, 501, 478, 501, 480, 501, 482, 501, 484, 501, 486, 501, 488, 501, 490, 501, 492, 501, 494, 501, 497, 502, 498, 501, 500, 501, 502, 403, 503, 444, 504, 501, 506, 501, 508, 501, 510, 501, 512, 501, 514, 501, 516, 501, 518, 501, 520, 501, 522, 501, 524, 501, 526, 501, 528, 501, 530, 501, 532, 501, 534, 501, 536, 501, 538, 501, 540, 501, 542, 501, 544, 370, 546, 501, 548, 501, 550, 501, 552, 501, 554, 501, 556, 501, 558, 501, 560, 501, 562, 501, 570, 11295, 571, 501, 573, 337, 574, 11292, 577, 501, 579, 305, 580, 569, 581, 571, 582, 501, 584, 501, 586, 501, 588, 501, 590, 501, 880, 501, 882, 501, 886, 501, 895, 616, 902, 538, 908, 564, 975, 508, 984, 501, 986, 501, 988, 501, 990, 501, 992, 501, 994, 501, 996, 501, 998, 501, 1000, 501, 1002, 501, 1004, 501, 1006, 501, 1012, 440, 1015, 501, 1017, 493, 1018, 501, 1120, 501, 1122, 501, 1124, 501, 1126, 501, 1128, 501, 1130, 501, 1132, 501, 1134, 501, 1136, 501, 1138, 501, 1140, 501, 1142, 501, 1144, 501, 1146, 501, 1148, 501, 1150, 501, 1152, 501, 1162, 501, 1164, 501, 1166, 501, 1168, 501, 1170, 501, 1172, 501, 1174, 501, 1176, 501, 1178, 501, 1180, 501, 1182, 501, 1184, 501, 1186, 501, 1188, 501, 1190, 501, 1192, 501, 1194, 501, 1196, 501, 1198, 501, 1200, 501, 1202, 501, 1204, 501, 1206, 501, 1208, 501, 1210, 501, 1212, 501, 1214, 501, 1216, 515, 1217, 501, 1219, 501, 1221, 501, 1223, 501, 1225, 501, 1227, 501, 1229, 501, 1232, 501, 1234, 501, 1236, 501, 1238, 501, 1240, 501, 1242, 501, 1244, 501, 1246, 501, 1248, 501, 1250, 501, 1252, 501, 1254, 501, 1256, 501, 1258, 501, 1260, 501, 1262, 501, 1264, 501, 1266, 501, 1268, 501, 1270, 501, 1272, 501, 1274, 501, 1276, 501, 1278, 501, 1280, 501, 1282, 501, 1284, 501, 1286, 501, 1288, 501, 1290, 501, 1292, 501, 1294, 501, 1296, 501, 1298, 501, 1300, 501, 1302, 501, 1304, 501, 1306, 501, 1308, 501, 1310, 501, 1312, 501, 1314, 501, 1316, 501, 1318, 501, 1320, 501, 1322, 501, 1324, 501, 1326, 501, 4295, 7764, 4301, 7764, 7680, 501, 7682, 501, 7684, 501, 7686, 501, 7688, 501, 7690, 501, 7692, 501, 7694, 501, 7696, 501, 7698, 501, 7700, 501, 7702, 501, 7704, 501, 7706, 501, 7708, 501, 7710, 501, 7712, 501, 7714, 501, 7716, 501, 7718, 501, 7720, 501, 7722, 501, 7724, 501, 7726, 501, 7728, 501, 7730, 501, 7732, 501, 7734, 501, 7736, 501, 7738, 501, 7740, 501, 7742, 501, 7744, 501, 7746, 501, 7748, 501, 7750, 501, 7752, 501, 7754, 501, 7756, 501, 7758, 501, 7760, 501, 7762, 501, 7764, 501, 7766, 501, 7768, 501, 7770, 501, 7772, 501, 7774, 501, 7776, 501, 7778, 501, 7780, 501, 7782, 501, 7784, 501, 7786, 501, 7788, 501, 7790, 501, 7792, 501, 7794, 501, 7796, 501, 7798, 501, 7800, 501, 7802, 501, 7804, 501, 7806, 501, 7808, 501, 7810, 501, 7812, 501, 7814, 501, 7816, 501, 7818, 501, 7820, 501, 7822, 501, 7824, 501, 7826, 501, 7828, 501, 7838, -7115, 7840, 501, 7842, 501, 7844, 501, 7846, 501, 7848, 501, 7850, 501, 7852, 501, 7854, 501, 7856, 501, 7858, 501, 7860, 501, 7862, 501, 7864, 501, 7866, 501, 7868, 501, 7870, 501, 7872, 501, 7874, 501, 7876, 501, 7878, 501, 7880, 501, 7882, 501, 7884, 501, 7886, 501, 7888, 501, 7890, 501, 7892, 501, 7894, 501, 7896, 501, 7898, 501, 7900, 501, 7902, 501, 7904, 501, 7906, 501, 7908, 501, 7910, 501, 7912, 501, 7914, 501, 7916, 501, 7918, 501, 7920, 501, 7922, 501, 7924, 501, 7926, 501, 7928, 501, 7930, 501, 7932, 501, 7934, 501, 8025, 492, 8027, 492, 8029, 492, 8031, 492, 8124, 491, 8140, 491, 8172, 493, 8188, 491, 8486, -7017, 8490, -7883, 8491, -7762, 8498, 528, 8579, 501, 11360, 501, 11362, -10243, 11363, -3314, 11364, -10227, 11367, 501, 11369, 501, 11371, 501, 11373, -10280, 11374, -10249, 11375, -10283, 11376, -10282, 11378, 501, 11381, 501, 11392, 501, 11394, 501, 11396, 501, 11398, 501, 11400, 501, 11402, 501, 11404, 501, 11406, 501, 11408, 501, 11410, 501, 11412, 501, 11414, 501, 11416, 501, 11418, 501, 11420, 501, 11422, 501, 11424, 501, 11426, 501, 11428, 501, 11430, 501, 11432, 501, 11434, 501, 11436, 501, 11438, 501, 11440, 501, 11442, 501, 11444, 501, 11446, 501, 11448, 501, 11450, 501, 11452, 501, 11454, 501, 11456, 501, 11458, 501, 11460, 501, 11462, 501, 11464, 501, 11466, 501, 11468, 501, 11470, 501, 11472, 501, 11474, 501, 11476, 501, 11478, 501, 11480, 501, 11482, 501, 11484, 501, 11486, 501, 11488, 501, 11490, 501, 11499, 501, 11501, 501, 11506, 501, 42560, 501, 42562, 501, 42564, 501, 42566, 501, 42568, 501, 42570, 501, 42572, 501, 42574, 501, 42576, 501, 42578, 501, 42580, 501, 42582, 501, 42584, 501, 42586, 501, 42588, 501, 42590, 501, 42592, 501, 42594, 501, 42596, 501, 42598, 501, 42600, 501, 42602, 501, 42604, 501, 42624, 501, 42626, 501, 42628, 501, 42630, 501, 42632, 501, 42634, 501, 42636, 501, 42638, 501, 42640, 501, 42642, 501, 42644, 501, 42646, 501, 42648, 501, 42650, 501, 42786, 501, 42788, 501, 42790, 501, 42792, 501, 42794, 501, 42796, 501, 42798, 501, 42802, 501, 42804, 501, 42806, 501, 42808, 501, 42810, 501, 42812, 501, 42814, 501, 42816, 501, 42818, 501, 42820, 501, 42822, 501, 42824, 501, 42826, 501, 42828, 501, 42830, 501, 42832, 501, 42834, 501, 42836, 501, 42838, 501, 42840, 501, 42842, 501, 42844, 501, 42846, 501, 42848, 501, 42850, 501, 42852, 501, 42854, 501, 42856, 501, 42858, 501, 42860, 501, 42862, 501, 42873, 501, 42875, 501, 42877, -34832, 42878, 501, 42880, 501, 42882, 501, 42884, 501, 42886, 501, 42891, 501, 42893, -41780, 42896, 501, 42898, 501, 42902, 501, 42904, 501, 42906, 501, 42908, 501, 42910, 501, 42912, 501, 42914, 501, 42916, 501, 42918, 501, 42920, 501, 42922, -41808, 42923, -41819, 42924, -41815, 42925, -41805, 42926, -41808, 42928, -41758, 42929, -41782, 42930, -41761, 42931, 1428, 42932, 501, 42934, 501, 42936, 501, 42938, 501, 42940, 501, 42942, 501, 42946, 501, 42948, 452, 42949, -41807, 42950, -34884], 610, 2);
			if (!(0 <= p_90816)) Tmp3 = false; else {				Tmp3 = (((c_90792)|0) == to_lower_singlets_88162[chckIndx(p_90816, 0, (to_lower_singlets_88162 != null ? to_lower_singlets_88162.length : 0)+0-1)-0]);			}		if (Tmp3) {
		result_90791 = subInt(addInt(((c_90792)|0), to_lower_singlets_88162[chckIndx(addInt(p_90816, 1), 0, (to_lower_singlets_88162 != null ? to_lower_singlets_88162.length : 0)+0-1)-0]), 500);
		break BeforeRet;
		}
		
		result_90791 = c_90792;
		break BeforeRet;
	} while (false);

	return result_90791;

}

function nuctoLowerStr(s_100222) {
	var result_100223 = null;

		result_100223 = nimCopy(null, mnewString(chckRange((s_100222 != null ? s_100222.length : 0), 0, 2147483647)), NTI138);
		var iHEX60gensym100224_100228 = 0;
		var result_indexHEX60gensym100225_100230 = 0;
		var runeHEX60gensym100226_100231 = 0;
		L1: do {
				L2: while (true) {
				if (!(iHEX60gensym100224_100228 < (s_100222 != null ? s_100222.length : 0))) break L2;
					if ((s_100222[chckIndx(iHEX60gensym100224_100228, 0, (s_100222 != null ? s_100222.length : 0)+0-1)-0] <= 127)) {
					runeHEX60gensym100226_100231 = chckRange(s_100222[chckIndx(iHEX60gensym100224_100228, 0, (s_100222 != null ? s_100222.length : 0)+0-1)-0], -2147483648, 2147483647);
					iHEX60gensym100224_100228 = addInt(iHEX60gensym100224_100228, 1);
					}
					else {
					if ((((s_100222[chckIndx(iHEX60gensym100224_100228, 0, (s_100222 != null ? s_100222.length : 0)+0-1)-0] >>> 0) >>> 5) == 6)) {
					if ((iHEX60gensym100224_100228 <= subInt((s_100222 != null ? s_100222.length : 0), 2))) {
					runeHEX60gensym100226_100231 = chckRange((((s_100222[chckIndx(iHEX60gensym100224_100228, 0, (s_100222 != null ? s_100222.length : 0)+0-1)-0] & 31) << 6) | (s_100222[chckIndx(addInt(iHEX60gensym100224_100228, 1), 0, (s_100222 != null ? s_100222.length : 0)+0-1)-0] & 63)), -2147483648, 2147483647);
					iHEX60gensym100224_100228 = addInt(iHEX60gensym100224_100228, 2);
					}
					else {
						runeHEX60gensym100226_100231 = 65533;
						iHEX60gensym100224_100228 = addInt(iHEX60gensym100224_100228, 1);
					}
					
					}
					else {
					if ((((s_100222[chckIndx(iHEX60gensym100224_100228, 0, (s_100222 != null ? s_100222.length : 0)+0-1)-0] >>> 0) >>> 4) == 14)) {
					if ((iHEX60gensym100224_100228 <= subInt((s_100222 != null ? s_100222.length : 0), 3))) {
					runeHEX60gensym100226_100231 = chckRange(((((s_100222[chckIndx(iHEX60gensym100224_100228, 0, (s_100222 != null ? s_100222.length : 0)+0-1)-0] & 15) << 12) | ((s_100222[chckIndx(addInt(iHEX60gensym100224_100228, 1), 0, (s_100222 != null ? s_100222.length : 0)+0-1)-0] & 63) << 6)) | (s_100222[chckIndx(addInt(iHEX60gensym100224_100228, 2), 0, (s_100222 != null ? s_100222.length : 0)+0-1)-0] & 63)), -2147483648, 2147483647);
					iHEX60gensym100224_100228 = addInt(iHEX60gensym100224_100228, 3);
					}
					else {
						runeHEX60gensym100226_100231 = 65533;
						iHEX60gensym100224_100228 = addInt(iHEX60gensym100224_100228, 1);
					}
					
					}
					else {
					if ((((s_100222[chckIndx(iHEX60gensym100224_100228, 0, (s_100222 != null ? s_100222.length : 0)+0-1)-0] >>> 0) >>> 3) == 30)) {
					if ((iHEX60gensym100224_100228 <= subInt((s_100222 != null ? s_100222.length : 0), 4))) {
					runeHEX60gensym100226_100231 = chckRange((((((s_100222[chckIndx(iHEX60gensym100224_100228, 0, (s_100222 != null ? s_100222.length : 0)+0-1)-0] & 7) << 18) | ((s_100222[chckIndx(addInt(iHEX60gensym100224_100228, 1), 0, (s_100222 != null ? s_100222.length : 0)+0-1)-0] & 63) << 12)) | ((s_100222[chckIndx(addInt(iHEX60gensym100224_100228, 2), 0, (s_100222 != null ? s_100222.length : 0)+0-1)-0] & 63) << 6)) | (s_100222[chckIndx(addInt(iHEX60gensym100224_100228, 3), 0, (s_100222 != null ? s_100222.length : 0)+0-1)-0] & 63)), -2147483648, 2147483647);
					iHEX60gensym100224_100228 = addInt(iHEX60gensym100224_100228, 4);
					}
					else {
						runeHEX60gensym100226_100231 = 65533;
						iHEX60gensym100224_100228 = addInt(iHEX60gensym100224_100228, 1);
					}
					
					}
					else {
					if ((((s_100222[chckIndx(iHEX60gensym100224_100228, 0, (s_100222 != null ? s_100222.length : 0)+0-1)-0] >>> 0) >>> 2) == 62)) {
					if ((iHEX60gensym100224_100228 <= subInt((s_100222 != null ? s_100222.length : 0), 5))) {
					runeHEX60gensym100226_100231 = chckRange(((((((s_100222[chckIndx(iHEX60gensym100224_100228, 0, (s_100222 != null ? s_100222.length : 0)+0-1)-0] & 3) << 24) | ((s_100222[chckIndx(addInt(iHEX60gensym100224_100228, 1), 0, (s_100222 != null ? s_100222.length : 0)+0-1)-0] & 63) << 18)) | ((s_100222[chckIndx(addInt(iHEX60gensym100224_100228, 2), 0, (s_100222 != null ? s_100222.length : 0)+0-1)-0] & 63) << 12)) | ((s_100222[chckIndx(addInt(iHEX60gensym100224_100228, 3), 0, (s_100222 != null ? s_100222.length : 0)+0-1)-0] & 63) << 6)) | (s_100222[chckIndx(addInt(iHEX60gensym100224_100228, 4), 0, (s_100222 != null ? s_100222.length : 0)+0-1)-0] & 63)), -2147483648, 2147483647);
					iHEX60gensym100224_100228 = addInt(iHEX60gensym100224_100228, 5);
					}
					else {
						runeHEX60gensym100226_100231 = 65533;
						iHEX60gensym100224_100228 = addInt(iHEX60gensym100224_100228, 1);
					}
					
					}
					else {
					if ((((s_100222[chckIndx(iHEX60gensym100224_100228, 0, (s_100222 != null ? s_100222.length : 0)+0-1)-0] >>> 0) >>> 1) == 126)) {
					if ((iHEX60gensym100224_100228 <= subInt((s_100222 != null ? s_100222.length : 0), 6))) {
					runeHEX60gensym100226_100231 = chckRange((((((((s_100222[chckIndx(iHEX60gensym100224_100228, 0, (s_100222 != null ? s_100222.length : 0)+0-1)-0] & 1) << 30) | ((s_100222[chckIndx(addInt(iHEX60gensym100224_100228, 1), 0, (s_100222 != null ? s_100222.length : 0)+0-1)-0] & 63) << 24)) | ((s_100222[chckIndx(addInt(iHEX60gensym100224_100228, 2), 0, (s_100222 != null ? s_100222.length : 0)+0-1)-0] & 63) << 18)) | ((s_100222[chckIndx(addInt(iHEX60gensym100224_100228, 3), 0, (s_100222 != null ? s_100222.length : 0)+0-1)-0] & 63) << 12)) | ((s_100222[chckIndx(addInt(iHEX60gensym100224_100228, 4), 0, (s_100222 != null ? s_100222.length : 0)+0-1)-0] & 63) << 6)) | (s_100222[chckIndx(addInt(iHEX60gensym100224_100228, 5), 0, (s_100222 != null ? s_100222.length : 0)+0-1)-0] & 63)), -2147483648, 2147483647);
					iHEX60gensym100224_100228 = addInt(iHEX60gensym100224_100228, 6);
					}
					else {
						runeHEX60gensym100226_100231 = 65533;
						iHEX60gensym100224_100228 = addInt(iHEX60gensym100224_100228, 1);
					}
					
					}
					else {
						runeHEX60gensym100226_100231 = chckRange(s_100222[chckIndx(iHEX60gensym100224_100228, 0, (s_100222 != null ? s_100222.length : 0)+0-1)-0], -2147483648, 2147483647);
						iHEX60gensym100224_100228 = addInt(iHEX60gensym100224_100228, 1);
					}
					}}}}}
					runeHEX60gensym100226_100231 = nuctoLower(runeHEX60gensym100226_100231);
					var iHEX60gensym102807_102808 = runeHEX60gensym100226_100231;
					if ((iHEX60gensym102807_102808 <= 127)) {
					(result_100223 == null ? result_100223 = mnewString(chckRange(addInt(result_indexHEX60gensym100225_100230, 1), 0, 2147483647)) : result_100223.length = chckRange(addInt(result_indexHEX60gensym100225_100230, 1), 0, 2147483647));
					result_100223[chckIndx(addInt(result_indexHEX60gensym100225_100230, 0), 0, (result_100223 != null ? result_100223.length : 0)+0-1)-0] = chckRange(iHEX60gensym102807_102808, 0, 255);
					result_indexHEX60gensym100225_100230 = addInt(result_indexHEX60gensym100225_100230, 1);
					}
					else {
					if ((iHEX60gensym102807_102808 <= 2047)) {
					(result_100223 == null ? result_100223 = mnewString(chckRange(addInt(result_indexHEX60gensym100225_100230, 2), 0, 2147483647)) : result_100223.length = chckRange(addInt(result_indexHEX60gensym100225_100230, 2), 0, 2147483647));
					result_100223[chckIndx(addInt(result_indexHEX60gensym100225_100230, 0), 0, (result_100223 != null ? result_100223.length : 0)+0-1)-0] = chckRange(((iHEX60gensym102807_102808 >> 6) | 192), 0, 255);
					result_100223[chckIndx(addInt(result_indexHEX60gensym100225_100230, 1), 0, (result_100223 != null ? result_100223.length : 0)+0-1)-0] = chckRange(((iHEX60gensym102807_102808 & 63) | 128), 0, 255);
					result_indexHEX60gensym100225_100230 = addInt(result_indexHEX60gensym100225_100230, 2);
					}
					else {
					if ((iHEX60gensym102807_102808 <= 65535)) {
					(result_100223 == null ? result_100223 = mnewString(chckRange(addInt(result_indexHEX60gensym100225_100230, 3), 0, 2147483647)) : result_100223.length = chckRange(addInt(result_indexHEX60gensym100225_100230, 3), 0, 2147483647));
					result_100223[chckIndx(addInt(result_indexHEX60gensym100225_100230, 0), 0, (result_100223 != null ? result_100223.length : 0)+0-1)-0] = chckRange(((iHEX60gensym102807_102808 >> 12) | 224), 0, 255);
					result_100223[chckIndx(addInt(result_indexHEX60gensym100225_100230, 1), 0, (result_100223 != null ? result_100223.length : 0)+0-1)-0] = chckRange((((iHEX60gensym102807_102808 >> 6) & 63) | 128), 0, 255);
					result_100223[chckIndx(addInt(result_indexHEX60gensym100225_100230, 2), 0, (result_100223 != null ? result_100223.length : 0)+0-1)-0] = chckRange(((iHEX60gensym102807_102808 & 63) | 128), 0, 255);
					result_indexHEX60gensym100225_100230 = addInt(result_indexHEX60gensym100225_100230, 3);
					}
					else {
					if ((iHEX60gensym102807_102808 <= 2097151)) {
					(result_100223 == null ? result_100223 = mnewString(chckRange(addInt(result_indexHEX60gensym100225_100230, 4), 0, 2147483647)) : result_100223.length = chckRange(addInt(result_indexHEX60gensym100225_100230, 4), 0, 2147483647));
					result_100223[chckIndx(addInt(result_indexHEX60gensym100225_100230, 0), 0, (result_100223 != null ? result_100223.length : 0)+0-1)-0] = chckRange(((iHEX60gensym102807_102808 >> 18) | 240), 0, 255);
					result_100223[chckIndx(addInt(result_indexHEX60gensym100225_100230, 1), 0, (result_100223 != null ? result_100223.length : 0)+0-1)-0] = chckRange((((iHEX60gensym102807_102808 >> 12) & 63) | 128), 0, 255);
					result_100223[chckIndx(addInt(result_indexHEX60gensym100225_100230, 2), 0, (result_100223 != null ? result_100223.length : 0)+0-1)-0] = chckRange((((iHEX60gensym102807_102808 >> 6) & 63) | 128), 0, 255);
					result_100223[chckIndx(addInt(result_indexHEX60gensym100225_100230, 3), 0, (result_100223 != null ? result_100223.length : 0)+0-1)-0] = chckRange(((iHEX60gensym102807_102808 & 63) | 128), 0, 255);
					result_indexHEX60gensym100225_100230 = addInt(result_indexHEX60gensym100225_100230, 4);
					}
					else {
					if ((iHEX60gensym102807_102808 <= 67108863)) {
					(result_100223 == null ? result_100223 = mnewString(chckRange(addInt(result_indexHEX60gensym100225_100230, 5), 0, 2147483647)) : result_100223.length = chckRange(addInt(result_indexHEX60gensym100225_100230, 5), 0, 2147483647));
					result_100223[chckIndx(addInt(result_indexHEX60gensym100225_100230, 0), 0, (result_100223 != null ? result_100223.length : 0)+0-1)-0] = chckRange(((iHEX60gensym102807_102808 >> 24) | 248), 0, 255);
					result_100223[chckIndx(addInt(result_indexHEX60gensym100225_100230, 1), 0, (result_100223 != null ? result_100223.length : 0)+0-1)-0] = chckRange((((iHEX60gensym102807_102808 >> 18) & 63) | 128), 0, 255);
					result_100223[chckIndx(addInt(result_indexHEX60gensym100225_100230, 2), 0, (result_100223 != null ? result_100223.length : 0)+0-1)-0] = chckRange((((iHEX60gensym102807_102808 >> 12) & 63) | 128), 0, 255);
					result_100223[chckIndx(addInt(result_indexHEX60gensym100225_100230, 3), 0, (result_100223 != null ? result_100223.length : 0)+0-1)-0] = chckRange((((iHEX60gensym102807_102808 >> 6) & 63) | 128), 0, 255);
					result_100223[chckIndx(addInt(result_indexHEX60gensym100225_100230, 4), 0, (result_100223 != null ? result_100223.length : 0)+0-1)-0] = chckRange(((iHEX60gensym102807_102808 & 63) | 128), 0, 255);
					result_indexHEX60gensym100225_100230 = addInt(result_indexHEX60gensym100225_100230, 5);
					}
					else {
					if ((iHEX60gensym102807_102808 <= 2147483647)) {
					(result_100223 == null ? result_100223 = mnewString(chckRange(addInt(result_indexHEX60gensym100225_100230, 6), 0, 2147483647)) : result_100223.length = chckRange(addInt(result_indexHEX60gensym100225_100230, 6), 0, 2147483647));
					result_100223[chckIndx(addInt(result_indexHEX60gensym100225_100230, 0), 0, (result_100223 != null ? result_100223.length : 0)+0-1)-0] = chckRange(((iHEX60gensym102807_102808 >> 30) | 252), 0, 255);
					result_100223[chckIndx(addInt(result_indexHEX60gensym100225_100230, 1), 0, (result_100223 != null ? result_100223.length : 0)+0-1)-0] = chckRange((((iHEX60gensym102807_102808 >> 24) & 63) | 128), 0, 255);
					result_100223[chckIndx(addInt(result_indexHEX60gensym100225_100230, 2), 0, (result_100223 != null ? result_100223.length : 0)+0-1)-0] = chckRange((((iHEX60gensym102807_102808 >> 18) & 63) | 128), 0, 255);
					result_100223[chckIndx(addInt(result_indexHEX60gensym100225_100230, 3), 0, (result_100223 != null ? result_100223.length : 0)+0-1)-0] = chckRange((((iHEX60gensym102807_102808 >> 12) & 63) | 128), 0, 255);
					result_100223[chckIndx(addInt(result_indexHEX60gensym100225_100230, 4), 0, (result_100223 != null ? result_100223.length : 0)+0-1)-0] = chckRange((((iHEX60gensym102807_102808 >> 6) & 63) | 128), 0, 255);
					result_100223[chckIndx(addInt(result_indexHEX60gensym100225_100230, 5), 0, (result_100223 != null ? result_100223.length : 0)+0-1)-0] = chckRange(((iHEX60gensym102807_102808 & 63) | 128), 0, 255);
					result_indexHEX60gensym100225_100230 = addInt(result_indexHEX60gensym100225_100230, 6);
					}
					else {
					}
					}}}}}
				}
		} while(false);

	return result_100223;

}

function new_seq_208426(len_208429) {
	var result_208431 = null;

		result_208431 = new Array(len_208429); for (var i=0;i<len_208429;++i) {result_208431[i]=null;}
	return result_208431;

}

function get_int_183718(n_183720, default_183721) {
			var Tmp1;
			var Tmp2;

	var result_183722 = 0;

	BeforeRet: do {
			if ((n_183720 == null)) Tmp1 = true; else {				Tmp1 = !((n_183720.kind == 2));			}		if (Tmp1) {
		result_183722 = default_183721;
		break BeforeRet;
		}
		else {
			var Tmp2 = n_183720;
			if (ConstSet12[Tmp2.kind]===undefined) { raiseFieldError(makeNimstrLit("\'num\' is not accessible using discriminant \'kind\' of type \'JsonNodeObj\'")); }
			result_183722 = chckRange(Tmp2.num, -2147483648, 2147483647);
			break BeforeRet;
		}
		
	} while (false);

	return result_183722;

}

function nsuToUpperAsciiChar(c_160463) {
	var result_160464 = 0;

		if ((ConstSet13[c_160463] != undefined)) {
		result_160464 = chckRange(subInt(c_160463, 32), 0, 255);
		}
		else {
			result_160464 = c_160463;
		}
		

	return result_160464;

}

function substr_30453(s_30455, first_30456) {
	var result_30458 = null;

		result_30458 = nimCopy(null, substr_30422(s_30455, first_30456, (s_30455 != null ? (s_30455.length-1) : -1)), NTI138);

	return result_30458;

}

function nsuCapitalizeAscii(s_160535) {
	var result_160536 = null;

		if (((s_160535 != null ? s_160535.length : 0) == 0)) {
		result_160536 = nimCopy(null, [], NTI138);
		}
		else {
			result_160536 = nimCopy(null, [nsuToUpperAsciiChar(s_160535[chckIndx(0, 0, (s_160535 != null ? s_160535.length : 0)+0-1)-0])].concat(substr_30453(s_160535, 1) || []), NTI138);
		}
		

	return result_160536;

}

function HEX40_208542(a_208546) {
	var result_208548 = null;

		result_208548 = new Array(chckRange((a_208546 != null ? a_208546.length : 0), 0, 2147483647)); for (var i=0;i<chckRange((a_208546 != null ? a_208546.length : 0), 0, 2147483647);++i) {result_208548[i]=0;}		L1: do {
			var i_208572 = 0;
			var colontmp__210347 = 0;
			colontmp__210347 = subInt((a_208546 != null ? a_208546.length : 0), 1);
			var res_210348 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_210348 <= colontmp__210347)) break L3;
						i_208572 = res_210348;
						result_208548[chckIndx(i_208572, 0, (result_208548 != null ? result_208548.length : 0)+0-1)-0] = a_208546[chckIndx(i_208572, 0, (a_208546 != null ? a_208546.length : 0)+0-1)-0];
						res_210348 = addInt(res_210348, 1);
					}
			} while(false);
		} while(false);

	return result_208548;

}

function HEX2A_66019(x_66021, order_66022) {
	var result_66023 = 0;

		var y_66028 = subInt(order_66022, 1);
		result_66023 = subInt((x_66021 ^ y_66028), y_66028);

	return result_66023;

}

function merge_208645(a_208650, b_208653, lo_208654, m_208655, hi_208656, cmp_208660, order_208661) {
	BeforeRet: do {
		if ((HEX2A_66019(cmp_208660(a_208650[chckIndx(m_208655, 0, (a_208650 != null ? a_208650.length : 0)+0-1)-0], a_208650[chckIndx(addInt(m_208655, 1), 0, (a_208650 != null ? a_208650.length : 0)+0-1)-0]), order_208661) <= 0)) {
		break BeforeRet;
		}
		
		var j_208662 = lo_208654;
		if (!((j_208662 <= m_208655))) {
		failed_assert_impl_15266(makeNimstrLit("algorithm.nim(344, 10) `j <= m` "));
		}
		
		var bb_209002 = 0;
		L1: do {
				L2: while (true) {
				if (!(j_208662 <= m_208655)) break L2;
					b_208653[chckIndx(bb_209002, 0, (b_208653 != null ? b_208653.length : 0)+0-1)-0] = a_208650[chckIndx(j_208662, 0, (a_208650 != null ? a_208650.length : 0)+0-1)-0];
					bb_209002 = addInt(bb_209002, 1);
					j_208662 = addInt(j_208662, 1);
				}
		} while(false);
		var i_209214 = 0;
		var k_209215 = lo_208654;
		L3: do {
				L4: while (true) {
				if (!((k_209215 < j_208662) && (j_208662 <= hi_208656))) break L4;
					if ((HEX2A_66019(cmp_208660(b_208653[chckIndx(i_209214, 0, (b_208653 != null ? b_208653.length : 0)+0-1)-0], a_208650[chckIndx(j_208662, 0, (a_208650 != null ? a_208650.length : 0)+0-1)-0]), order_208661) <= 0)) {
					a_208650[chckIndx(k_209215, 0, (a_208650 != null ? a_208650.length : 0)+0-1)-0] = b_208653[chckIndx(i_209214, 0, (b_208653 != null ? b_208653.length : 0)+0-1)-0];
					i_209214 = addInt(i_209214, 1);
					}
					else {
						a_208650[chckIndx(k_209215, 0, (a_208650 != null ? a_208650.length : 0)+0-1)-0] = a_208650[chckIndx(j_208662, 0, (a_208650 != null ? a_208650.length : 0)+0-1)-0];
						j_208662 = addInt(j_208662, 1);
					}
					
					k_209215 = addInt(k_209215, 1);
				}
		} while(false);
		L5: do {
				L6: while (true) {
				if (!(k_209215 < j_208662)) break L6;
					a_208650[chckIndx(k_209215, 0, (a_208650 != null ? a_208650.length : 0)+0-1)-0] = b_208653[chckIndx(i_209214, 0, (b_208653 != null ? b_208653.length : 0)+0-1)-0];
					k_209215 = addInt(k_209215, 1);
					i_209214 = addInt(i_209214, 1);
				}
		} while(false);
	} while (false);

	
}

function sort_208614(a_208619, cmp_208623, order_208624) {
		var n_208629 = (a_208619 != null ? a_208619.length : 0);
		var b_208631 = null;
		b_208631 = new Array(chckRange(divInt(n_208629, 2), 0, 2147483647)); for (var i=0;i<chckRange(divInt(n_208629, 2), 0, 2147483647);++i) {b_208631[i]=0;}		var s_208640 = 1;
		L1: do {
				L2: while (true) {
				if (!(s_208640 < n_208629)) break L2;
					var m_208641 = subInt(subInt(n_208629, 1), s_208640);
					L3: do {
							L4: while (true) {
							if (!(0 <= m_208641)) break L4;
								merge_208645(a_208619, b_208631, nimMax(addInt(subInt(m_208641, s_208640), 1), 0), m_208641, addInt(m_208641, s_208640), cmp_208623, order_208624);
								m_208641 = subInt(m_208641, mulInt(s_208640, 2));
							}
					} while(false);
					s_208640 = mulInt(s_208640, 2);
				}
		} while(false);

	
}

function cmp_208591(x_208594, y_208595) {
	var result_208596 = 0;

	BeforeRet: do {
		if ((x_208594 == y_208595)) {
		result_208596 = 0;
		break BeforeRet;
		}
		
		if ((x_208594 < y_208595)) {
		result_208596 = -1;
		break BeforeRet;
		}
		
		result_208596 = 1;
		break BeforeRet;
	} while (false);

	return result_208596;

}

function has_key_192126(t_192131, key_192132) {
	var result_192133 = false;

		var hc_192134 = [0];
		result_192133 = (0 <= raw_get_185021(t_192131, key_192132, hc_192134, 0));

	return result_192133;

}

function has_key_194815(node_194817, key_194818) {
		var Tmp1;

	var result_194819 = false;

		if (!((node_194817.kind == 5))) {
		failed_assert_impl_15266(makeNimstrLit("json.nim(492, 9) `node.kind == JObject` "));
		}
		
		var Tmp1 = node_194817;
		if (ConstSet14[Tmp1.kind]===undefined) { raiseFieldError(makeNimstrLit("\'fields\' is not accessible using discriminant \'kind\' of type \'JsonNodeObj\'")); }
		result_194819 = has_key_192126(Tmp1.fields, key_194818);

	return result_194819;

}

function pretty_present_208397(node_208399) {
	var result_208400 = null;

		result_208400 = nimCopy(null, (get_str_183688(HEX5BHEX5D_193856(node_208399, makeNimstrLit("symbol")), []) || []).concat(makeNimstrLit(" ") || [],get_str_183688(HEX5BHEX5D_193856(node_208399, makeNimstrLit("name")), []) || []), NTI138);
		if (has_key_194815(node_208399, makeNimstrLit("summary"))) {
		result_208400 = nimCopy(null, (result_208400 || []).concat(makeNimstrLit(" ") || [],cstrToNimstr((get_int_183718(HEX5BHEX5D_193856(node_208399, makeNimstrLit("number")), 0))+"") || []), NTI138);
		}
		

	return result_208400;

}

function reverse_210096(a_210101, first_210102, last_210103) {
		var x_210104 = first_210102;
		var y_210105 = last_210103;
		L1: do {
				L2: while (true) {
				if (!(x_210104 < y_210105)) break L2;
					var Tmp3 = a_210101[chckIndx(x_210104, 0, (a_210101 != null ? a_210101.length : 0)+0-1)-0]; a_210101[chckIndx(x_210104, 0, (a_210101 != null ? a_210101.length : 0)+0-1)-0] = a_210101[chckIndx(y_210105, 0, (a_210101 != null ? a_210101.length : 0)+0-1)-0]; a_210101[chckIndx(y_210105, 0, (a_210101 != null ? a_210101.length : 0)+0-1)-0] = Tmp3;					y_210105 = subInt(y_210105, 1);
					x_210104 = addInt(x_210104, 1);
				}
		} while(false);

	
}

function next_permutation_210047(x_210052) {
					var Tmp3;
					var Tmp6;

	var result_210053 = false;

	BeforeRet: do {
		if (((x_210052 != null ? x_210052.length : 0) < 2)) {
		result_210053 = false;
		break BeforeRet;
		}
		
		var i_210063 = (x_210052 != null ? (x_210052.length-1) : -1);
		L1: do {
				L2: while (true) {
					if (!(0 < i_210063)) Tmp3 = false; else {						Tmp3 = (x_210052[chckIndx(i_210063, 0, (x_210052 != null ? x_210052.length : 0)+0-1)-0] <= x_210052[chckIndx(subInt(i_210063, 1), 0, (x_210052 != null ? x_210052.length : 0)+0-1)-0]);					}				if (!Tmp3) break L2;
					i_210063 = subInt(i_210063, 1);
				}
		} while(false);
		if ((i_210063 == 0)) {
		result_210053 = false;
		break BeforeRet;
		}
		
		var j_210077 = (x_210052 != null ? (x_210052.length-1) : -1);
		L4: do {
				L5: while (true) {
					if (!(i_210063 <= j_210077)) Tmp6 = false; else {						Tmp6 = (x_210052[chckIndx(j_210077, 0, (x_210052 != null ? x_210052.length : 0)+0-1)-0] <= x_210052[chckIndx(subInt(i_210063, 1), 0, (x_210052 != null ? x_210052.length : 0)+0-1)-0]);					}				if (!Tmp6) break L5;
					j_210077 = subInt(j_210077, 1);
				}
		} while(false);
		var Tmp7 = x_210052[chckIndx(j_210077, 0, (x_210052 != null ? x_210052.length : 0)+0-1)-0]; x_210052[chckIndx(j_210077, 0, (x_210052 != null ? x_210052.length : 0)+0-1)-0] = x_210052[chckIndx(subInt(i_210063, 1), 0, (x_210052 != null ? x_210052.length : 0)+0-1)-0]; x_210052[chckIndx(subInt(i_210063, 1), 0, (x_210052 != null ? x_210052.length : 0)+0-1)-0] = Tmp7;		reverse_210096(x_210052, chckRange(i_210063, 0, 2147483647), chckRange((x_210052 != null ? (x_210052.length-1) : -1), 0, 2147483647));
		result_210053 = true;
	} while (false);

	return result_210053;

}

function print_208260(content_208262) {
		document.getElementById("main").innerHTML = toJSStr(content_208262);

	
}

function do_stuff_208418(string_elements_208420) {
				var Tmp3;
				var Tmp8;

		var data_208421 = parse_json_203457(string_elements_208420);
		var wanted_208422 = null;
		if ((localStorage.getItem("phrase") !== null)) {
		if (!((localStorage.getItem("phrase") == ""))) {
		wanted_208422 = nimCopy(null, nsuJoinSep(nsuSplitCharSet(nsuStrip(nuctoLowerStr(cstrToNimstr(localStorage.getItem("phrase"))), true, true, ConstSet8), ConstSet9, -1), []), NTI138);
		}
		else {
			wanted_208422 = nimCopy(null, makeNimstrLit("salt"), NTI138);
		}
		
		}
		else {
			wanted_208422 = nimCopy(null, makeNimstrLit("salt"), NTI138);
		}
		
		var list_of_metals_208460 = new_seq_208426(0);
		var list_of_nonmetals_208477 = new_seq_208426(0);
		var elem_status_208478 = null;
		L1: do {
			var element_208479 = null;
			var colontmp__210254 = null;
			colontmp__210254 = HEX5BHEX5D_193856(data_208421, makeNimstrLit("elements"));
			if (!((colontmp__210254.kind == 6))) {
			failed_assert_impl_15266(makeNimstrLit("json.nim(758, 10) `node.kind == JArray` "));
			}
			
			L2: do {
				var i_210262 = null;
				var colontmp__210263 = null;
				var Tmp3 = colontmp__210254;
				if (ConstSet10[Tmp3.kind]===undefined) { raiseFieldError(makeNimstrLit("\'elems\' is not accessible using discriminant \'kind\' of type \'JsonNodeObj\'")); }
				colontmp__210263 = Tmp3.elems;
				var i_210264 = 0;
				var l_210265 = (colontmp__210263 != null ? colontmp__210263.length : 0);
				L4: do {
						L5: while (true) {
						if (!(i_210264 < l_210265)) break L5;
							i_210262 = colontmp__210263[chckIndx(i_210264, 0, (colontmp__210263 != null ? colontmp__210263.length : 0)+0-1)-0];
							element_208479 = i_210262;
							elem_status_208478 = nimCopy(null, metal_status(element_208479), NTI138);
							if (eqStrings(elem_status_208478, makeNimstrLit("metal"))) {
							if (list_of_metals_208460 != null) { list_of_metals_208460.push(element_208479); } else { list_of_metals_208460 = [element_208479]; };
							}
							else {
							if (eqStrings(elem_status_208478, makeNimstrLit("non-metal"))) {
							if (list_of_nonmetals_208477 != null) { list_of_nonmetals_208477.push(element_208479); } else { list_of_nonmetals_208477 = [element_208479]; };
							}
							}
							i_210264 = addInt(i_210264, 1);
							if (!(((colontmp__210263 != null ? colontmp__210263.length : 0) == l_210265))) {
							failed_assert_impl_15266(makeNimstrLit("iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
							}
							
						}
				} while(false);
			} while(false);
		} while(false);
		L6: do {
			var ion_208498 = null;
			var colontmp__210268 = null;
			colontmp__210268 = HEX5BHEX5D_193856(data_208421, makeNimstrLit("polyatomics"));
			if (!((colontmp__210268.kind == 6))) {
			failed_assert_impl_15266(makeNimstrLit("json.nim(758, 10) `node.kind == JArray` "));
			}
			
			L7: do {
				var i_210270 = null;
				var colontmp__210271 = null;
				var Tmp8 = colontmp__210268;
				if (ConstSet11[Tmp8.kind]===undefined) { raiseFieldError(makeNimstrLit("\'elems\' is not accessible using discriminant \'kind\' of type \'JsonNodeObj\'")); }
				colontmp__210271 = Tmp8.elems;
				var i_210272 = 0;
				var l_210273 = (colontmp__210271 != null ? colontmp__210271.length : 0);
				L9: do {
						L10: while (true) {
						if (!(i_210272 < l_210273)) break L10;
							i_210270 = colontmp__210271[chckIndx(i_210272, 0, (colontmp__210271 != null ? colontmp__210271.length : 0)+0-1)-0];
							ion_208498 = i_210270;
							if ((0 < get_int_183718(HEX5BHEX5D_193856(ion_208498, makeNimstrLit("charge")), 0))) {
							if (list_of_metals_208460 != null) { list_of_metals_208460.push(ion_208498); } else { list_of_metals_208460 = [ion_208498]; };
							}
							else {
							if (list_of_nonmetals_208477 != null) { list_of_nonmetals_208477.push(ion_208498); } else { list_of_nonmetals_208477 = [ion_208498]; };
							}
							
							i_210272 = addInt(i_210272, 1);
							if (!(((colontmp__210271 != null ? colontmp__210271.length : 0) == l_210273))) {
							failed_assert_impl_15266(makeNimstrLit("iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
							}
							
						}
				} while(false);
			} while(false);
		} while(false);
		var has_salt_208516 = false;
		var elem_208517 = null;
		var otherelem_208518 = null;
		var combo_208519 = null;
		var content_208520 = [];
		content_208520 = nimCopy(null, (content_208520 || []).concat(makeNimstrLit("<pre>") || [],nsuCapitalizeAscii(wanted_208422) || [],makeNimstrLit("\x0A") || []), NTI138);
		L11: do {
			var element_208527 = null;
			var i_210285 = 0;
			var l_210286 = (list_of_metals_208460 != null ? list_of_metals_208460.length : 0);
			L12: do {
					L13: while (true) {
					if (!(i_210285 < l_210286)) break L13;
						element_208527 = list_of_metals_208460[chckIndx(i_210285, 0, (list_of_metals_208460 != null ? list_of_metals_208460.length : 0)+0-1)-0];
						elem_208517 = nimCopy(null, get_symb(element_208527), NTI138);
						L14: do {
							var otherelement_208534 = null;
							var i_210282 = 0;
							var l_210283 = (list_of_nonmetals_208477 != null ? list_of_nonmetals_208477.length : 0);
							L15: do {
									L16: while (true) {
									if (!(i_210282 < l_210283)) break L16;
										otherelement_208534 = list_of_nonmetals_208477[chckIndx(i_210282, 0, (list_of_nonmetals_208477 != null ? list_of_nonmetals_208477.length : 0)+0-1)-0];
										L17: do {
											otherelem_208518 = nimCopy(null, get_symb(otherelement_208534), NTI138);
											combo_208519 = nimCopy(null, (elem_208517 || []).concat(otherelem_208518 || []), NTI138);
											if (!(((combo_208519 != null ? combo_208519.length : 0) == (wanted_208422 != null ? wanted_208422.length : 0)))) {
											break L17;
											}
											
											L18: do {
												var perm_210164 = null;
												var x_210280 = HEX40_208542(combo_208519);
												sort_208614(x_210280, cmp_208591, 1);
												perm_210164 = x_210280;
												if (eqStrings($(perm_210164), wanted_208422)) {
												if (has_salt_208516) {
												content_208520 = nimCopy(null, (content_208520 || []).concat(makeNimstrLit("\x0A") || []), NTI138);
												}
												
												content_208520 = nimCopy(null, (content_208520 || []).concat(pretty_present_208397(element_208527) || []), NTI138);
												content_208520 = nimCopy(null, (content_208520 || []).concat(makeNimstrLit("\x0A") || []), NTI138);
												content_208520 = nimCopy(null, (content_208520 || []).concat(pretty_present_208397(otherelement_208534) || []), NTI138);
												content_208520 = nimCopy(null, (content_208520 || []).concat(makeNimstrLit("\x0A") || []), NTI138);
												has_salt_208516 = true;
												break L18;
												}
												
												L19: do {
														L20: while (true) {
														if (!next_permutation_210047(x_210280)) break L20;
															perm_210164 = x_210280;
															if (eqStrings($(perm_210164), wanted_208422)) {
															if (has_salt_208516) {
															content_208520 = nimCopy(null, (content_208520 || []).concat(makeNimstrLit("\x0A") || []), NTI138);
															}
															
															content_208520 = nimCopy(null, (content_208520 || []).concat(pretty_present_208397(element_208527) || []), NTI138);
															content_208520 = nimCopy(null, (content_208520 || []).concat(makeNimstrLit("\x0A") || []), NTI138);
															content_208520 = nimCopy(null, (content_208520 || []).concat(pretty_present_208397(otherelement_208534) || []), NTI138);
															content_208520 = nimCopy(null, (content_208520 || []).concat(makeNimstrLit("\x0A") || []), NTI138);
															has_salt_208516 = true;
															break L18;
															}
															
														}
												} while(false);
											} while(false);
										} while(false);
										i_210282 = addInt(i_210282, 1);
										if (!(((list_of_nonmetals_208477 != null ? list_of_nonmetals_208477.length : 0) == l_210283))) {
										failed_assert_impl_15266(makeNimstrLit("iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
										}
										
									}
							} while(false);
						} while(false);
						i_210285 = addInt(i_210285, 1);
						if (!(((list_of_metals_208460 != null ? list_of_metals_208460.length : 0) == l_210286))) {
						failed_assert_impl_15266(makeNimstrLit("iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		if (eqStrings(content_208520, (makeNimstrLit("<pre>") || []).concat(nsuCapitalizeAscii(wanted_208422) || [],makeNimstrLit("\x0A") || []))) {
		content_208520 = nimCopy(null, (content_208520 || []).concat(makeNimstrLit("No salts were found") || []), NTI138);
		}
		
		content_208520 = nimCopy(null, (content_208520 || []).concat(makeNimstrLit("</pre>") || []), NTI138);
		print_208260(content_208520);

	
}

function makeRequest(url_210185) {

		function alert_contents_210187(e_210189) {
				if ((http_request_210186.readyState == 4)) {
				if ((http_request_210186.status == 200)) {
				var content_210196 = cstrToNimstr(http_request_210186.responseText);
				do_stuff_208418(content_210196);
				}
				else {
				window.alert("There was a problem with the request.");
				}
				
				}
				

			
		}

		var http_request_210186 = new XMLHttpRequest();
		http_request_210186.onreadystatechange = alert_contents_210187;
		http_request_210186.open("GET", url_210185, true, null, null);
		http_request_210186.send();

	
}

function onLoad() {
		makeRequest("periodic.json");

	
}

function doFormStuff() {
		var phrase_210378 = cstrToNimstr(document.getElementById("phrase").value);
		localStorage.setItem("phrase", toJSStr(phrase_210378));
		window.location.reload();

	
}
